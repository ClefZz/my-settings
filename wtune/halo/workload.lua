require("util")
require("config")
require("runtime")

-- cache global to local
local _begin_f = _begin
local _commit_f = _commit
local _timing_start_f = _timing_start
local _timing_end_f = _timing_end
local _line_inserted_f = _line_inserted
local _record_timing_f = _record_timing
local _record_params_and_result_f = _record_params_and_result
local _gen_parameter_f = gen_parameter

-- sec, nsec, id
local _txn_timer = { -1, -1 }
local _stmt_timer = { -1, -1 }

function API_1_GET_page_x_1(_con)
  local _api = "GET /page/8"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 2
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 2, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 3
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 3, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 4
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 4, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 5
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 5, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 6
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 6, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_2_GET_api_content_sheets_x_comments_x_children_1(_con)
  local _api = "GET /api/content/sheets/2/comments/9/children"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 7
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  	AND sheetcomme0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 7, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 8
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.status = %s
  	AND sheetcomme0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 8, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_3_GET_page_x_1(_con)
  local _api = "GET /page/7"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 9
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 9, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 10
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 10, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 11
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 11, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 12
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 12, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 13
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 13, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 14
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 14, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_4_GET_page_x_1(_con)
  local _api = "GET /page/9"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 15
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 15, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 16
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 16, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 17
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 17, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 18
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 18, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 19
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 19, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 20
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 20, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_5_GET_api_admin_attachments_1(_con)
  local _api = "GET /api/admin/attachments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 21
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 21, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 22
  _sql = [[
  SELECT attachment0_.id AS id1_0_, attachment0_.create_time AS create_t2_0_, attachment0_.deleted AS deleted3_0_, attachment0_.update_time AS update_t4_0_, attachment0_.file_key AS file_key5_0_
  	, attachment0_.height AS height6_0_, attachment0_.media_type AS media_ty7_0_, attachment0_.name AS name8_0_, attachment0_.path AS path9_0_, attachment0_.size AS size10_0_
  	, attachment0_.suffix AS suffix11_0_, attachment0_.thumb_path AS thumb_p12_0_, attachment0_.type AS type13_0_, attachment0_.width AS width14_0_
  FROM attachments attachment0_
  WHERE 1 = 1
  ORDER BY attachment0_.update_time DESC
  LIMIT 12
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 22, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_5_GET_api_admin_attachments_2(_con)
  local _api = "GET /api/admin/attachments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 23
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 23, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 24
  _sql = [[
  SELECT attachment0_.id AS id1_0_, attachment0_.create_time AS create_t2_0_, attachment0_.deleted AS deleted3_0_, attachment0_.update_time AS update_t4_0_, attachment0_.file_key AS file_key5_0_
  	, attachment0_.height AS height6_0_, attachment0_.media_type AS media_ty7_0_, attachment0_.name AS name8_0_, attachment0_.path AS path9_0_, attachment0_.size AS size10_0_
  	, attachment0_.suffix AS suffix11_0_, attachment0_.thumb_path AS thumb_p12_0_, attachment0_.type AS type13_0_, attachment0_.width AS width14_0_
  FROM attachments attachment0_
  WHERE 1 = 1
  ORDER BY attachment0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 24, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_5_GET_api_admin_attachments_3(_con)
  local _api = "GET /api/admin/attachments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 25
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 25, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 26
  _sql = [[
  SELECT attachment0_.id AS id1_0_, attachment0_.create_time AS create_t2_0_, attachment0_.deleted AS deleted3_0_, attachment0_.update_time AS update_t4_0_, attachment0_.file_key AS file_key5_0_
  	, attachment0_.height AS height6_0_, attachment0_.media_type AS media_ty7_0_, attachment0_.name AS name8_0_, attachment0_.path AS path9_0_, attachment0_.size AS size10_0_
  	, attachment0_.suffix AS suffix11_0_, attachment0_.thumb_path AS thumb_p12_0_, attachment0_.type AS type13_0_, attachment0_.width AS width14_0_
  FROM attachments attachment0_
  WHERE attachment0_.name LIKE %s
  ORDER BY attachment0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 26, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_5_GET_api_admin_attachments_4(_con)
  local _api = "GET /api/admin/attachments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 27
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 27, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 28
  _sql = [[
  SELECT attachment0_.id AS id1_0_, attachment0_.create_time AS create_t2_0_, attachment0_.deleted AS deleted3_0_, attachment0_.update_time AS update_t4_0_, attachment0_.file_key AS file_key5_0_
  	, attachment0_.height AS height6_0_, attachment0_.media_type AS media_ty7_0_, attachment0_.name AS name8_0_, attachment0_.path AS path9_0_, attachment0_.size AS size10_0_
  	, attachment0_.suffix AS suffix11_0_, attachment0_.thumb_path AS thumb_p12_0_, attachment0_.type AS type13_0_, attachment0_.width AS width14_0_
  FROM attachments attachment0_
  WHERE attachment0_.type = %s
  	AND attachment0_.name LIKE %s
  ORDER BY attachment0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "attachments", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 28, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_5_GET_api_admin_attachments_5(_con)
  local _api = "GET /api/admin/attachments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 29
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 29, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 30
  _sql = [[
  SELECT attachment0_.id AS id1_0_, attachment0_.create_time AS create_t2_0_, attachment0_.deleted AS deleted3_0_, attachment0_.update_time AS update_t4_0_, attachment0_.file_key AS file_key5_0_
  	, attachment0_.height AS height6_0_, attachment0_.media_type AS media_ty7_0_, attachment0_.name AS name8_0_, attachment0_.path AS path9_0_, attachment0_.size AS size10_0_
  	, attachment0_.suffix AS suffix11_0_, attachment0_.thumb_path AS thumb_p12_0_, attachment0_.type AS type13_0_, attachment0_.width AS width14_0_
  FROM attachments attachment0_
  WHERE attachment0_.media_type = %s
  	AND attachment0_.type = %s
  	AND attachment0_.name LIKE %s
  ORDER BY attachment0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "media_type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "attachments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "attachments", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 30, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_6_GET_page_x_1(_con)
  local _api = "GET /page/4"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 31
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 31, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 32
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 32, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 33
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 33, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 34
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 34, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 35
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 35, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 36
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 36, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_7_POST_api_admin_sheets_1(_con)
  local _api = "POST /api/admin/sheets"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 37
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 37, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 38
  _sql = [[
  SELECT sheet0_.id AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 38, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 39 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 40 (ignored write)  _commit_f(_con, false)
  
end

function API_8_GET_page_x_1(_con)
  local _api = "GET /page/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 41
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 41, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 42
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 42, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 43
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 43, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 44
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 44, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 45
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 45, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 46
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 46, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_9_GET_api_content_journals_x_comments_top_view_1(_con)
  local _api = "GET /api/content/journals/2/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 47
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  	AND journalcom0_.parent_id = %s
  ORDER BY journalcom0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 47, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_9_GET_api_content_journals_x_comments_top_view_2(_con)
  local _api = "GET /api/content/journals/2/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 48
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  	AND journalcom0_.parent_id = %s
  ORDER BY journalcom0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 48, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 49
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.parent_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.parent_id IN (%s)
  GROUP BY journalcom0_.parent_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 49, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_10_GET_page_x_1(_con)
  local _api = "GET /page/6"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 50
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 50, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 51
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 51, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 52
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 52, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 53
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 53, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 54
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 54, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 55
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 55, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_11_GET_page_x_1(_con)
  local _api = "GET /page/5"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 56
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 56, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 57
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 57, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 58
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 58, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 59
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 59, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 60
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 60, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 61
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 61, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_12_GET_page_x_1(_con)
  local _api = "GET /page/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 62
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 62, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 63
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 63, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 64
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 64, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 65
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 65, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 66
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 66, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 67
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 67, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_13_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/26/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 68
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 68, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 69
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 69, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 70
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 70, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 71 (ignored write)  _commit_f(_con, true)
  
end

function API_14_GET_feed_xml_1(_con)
  local _api = "GET /feed.xml"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 72
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 72, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 73
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 73, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 74
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 74, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 75
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 75, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 76
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 76, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 77
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 77, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 78
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 78, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_15_GET_categories_x__1(_con)
  local _api = "GET /categories/111111/"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 79
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 79, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 80
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 80, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 81
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 81, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 82
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 82, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 83
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 83, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 84
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 84, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 85
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 85, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 86
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 86, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 87
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 87, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 88
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 88, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 89
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 89, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 90
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 90, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_16_PUT_api_admin_sheets_x_1(_con)
  local _api = "PUT /api/admin/sheets/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 91
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 91, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 92
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 92, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 93
  _sql = [[
  SELECT sheet0_.id AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.id <> %s
  	AND sheet0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 93, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 94
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 94, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 95 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 96 (ignored write)  _commit_f(_con, false)
  
end

function API_17_PUT_api_admin_sheets_x_1(_con)
  local _api = "PUT /api/admin/sheets/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 97
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 97, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 98
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 98, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 99
  _sql = [[
  SELECT sheet0_.id AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.id <> %s
  	AND sheet0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 99, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 100
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 100, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 101 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 102 (ignored write)  _commit_f(_con, false)
  
end

function API_18_GET_api_admin_logs_latest_1(_con)
  local _api = "GET /api/admin/logs/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 103
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 103, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 104
  _sql = [[
  SELECT log0_.id AS id1_5_, log0_.create_time AS create_t2_5_, log0_.deleted AS deleted3_5_, log0_.update_time AS update_t4_5_, log0_.content AS content5_5_
  	, log0_.ip_address AS ip_addre6_5_, log0_.log_key AS log_key7_5_, log0_.type AS type8_5_
  FROM logs log0_
  ORDER BY log0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 104, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_18_GET_api_admin_logs_latest_2(_con)
  local _api = "GET /api/admin/logs/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 105
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 105, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 106
  _sql = [[
  SELECT log0_.id AS id1_5_, log0_.create_time AS create_t2_5_, log0_.deleted AS deleted3_5_, log0_.update_time AS update_t4_5_, log0_.content AS content5_5_
  	, log0_.ip_address AS ip_addre6_5_, log0_.log_key AS log_key7_5_, log0_.type AS type8_5_
  FROM logs log0_
  ORDER BY log0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 106, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 107
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM logs log0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 107, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_19_POST_api_content_journals_comments_1(_con)
  local _api = "POST /api/content/journals/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 108
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 108, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 109
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 109, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 110 (ignored write)  _commit_f(_con, false)
  
end

function API_19_POST_api_content_journals_comments_2(_con)
  local _api = "POST /api/content/journals/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 111
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 111, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 112
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 112, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 113
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 113, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 114 (ignored write)  _commit_f(_con, false)
  
end

function API_20_GET_api_content_tags_1(_con)
  local _api = "GET /api/content/tags"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 115
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 115, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_20_GET_api_content_tags_2(_con)
  local _api = "GET /api/content/tags"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 116
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 116, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 117
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 117, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_21_PUT_api_admin_password_reset_1(_con)
  local _api = "PUT /api/admin/password/reset"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 118
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 118, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 119
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 119, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 120
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 120, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 121 (ignored write)  -- line 122
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 122, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
-- line 123 (ignored write)
end

function API_22_POST_api_admin_mails_test_1(_con)
  local _api = "POST /api/admin/mails/test"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 124
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 124, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_23_PUT_api_admin_photos_x_1(_con)
  local _api = "PUT /api/admin/photos/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 125
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 125, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 126
  _sql = [[
  SELECT photo0_.id AS id1_9_0_, photo0_.create_time AS create_t2_9_0_, photo0_.deleted AS deleted3_9_0_, photo0_.update_time AS update_t4_9_0_, photo0_.description AS descript5_9_0_
  	, photo0_.location AS location6_9_0_, photo0_.name AS name7_9_0_, photo0_.take_time AS take_tim8_9_0_, photo0_.team AS team9_9_0_, photo0_.thumbnail AS thumbna10_9_0_
  	, photo0_.url AS url11_9_0_
  FROM photos photo0_
  WHERE photo0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 126, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 127
  _sql = [[
  SELECT photo0_.id AS id1_9_0_, photo0_.create_time AS create_t2_9_0_, photo0_.deleted AS deleted3_9_0_, photo0_.update_time AS update_t4_9_0_, photo0_.description AS descript5_9_0_
  	, photo0_.location AS location6_9_0_, photo0_.name AS name7_9_0_, photo0_.take_time AS take_tim8_9_0_, photo0_.team AS team9_9_0_, photo0_.thumbnail AS thumbna10_9_0_
  	, photo0_.url AS url11_9_0_
  FROM photos photo0_
  WHERE photo0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 127, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 128 (ignored write)  _commit_f(_con, true)
  
end

function API_24_PUT_api_admin_categories_x_1(_con)
  local _api = "PUT /api/admin/categories/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 129
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 129, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 130
  _sql = [[
  SELECT category0_.id AS id1_1_0_, category0_.create_time AS create_t2_1_0_, category0_.deleted AS deleted3_1_0_, category0_.update_time AS update_t4_1_0_, category0_.description AS descript5_1_0_
  	, category0_.name AS name6_1_0_, category0_.parent_id AS parent_i7_1_0_, category0_.slug_name AS slug_nam8_1_0_
  FROM categories category0_
  WHERE category0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 130, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 131
  _sql = [[
  SELECT category0_.id AS id1_1_0_, category0_.create_time AS create_t2_1_0_, category0_.deleted AS deleted3_1_0_, category0_.update_time AS update_t4_1_0_, category0_.description AS descript5_1_0_
  	, category0_.name AS name6_1_0_, category0_.parent_id AS parent_i7_1_0_, category0_.slug_name AS slug_nam8_1_0_
  FROM categories category0_
  WHERE category0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 131, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 132 (ignored write)  _commit_f(_con, true)
  
end

function API_25_GET_archives_x_1(_con)
  local _api = "GET /archives/1111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 133
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 133, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_26_PUT_api_admin_posts_x_1(_con)
  local _api = "PUT /api/admin/posts/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 134
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 134, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 135
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 135, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 136
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 136, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 137
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 137, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 138 (ignored write)  -- line 139
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 139, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 140
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 140, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 141
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 141, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 142 (ignored write)  -- line 143
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 143, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 144 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 145 (ignored write)  _commit_f(_con, false)
  
end

function API_27_DELETE_api_admin_posts_comments_x_1(_con)
  local _api = "DELETE /api/admin/posts/comments/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 146
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 146, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 147
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 147, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 148 (ignored write)  _commit_f(_con, true)
  
end

function API_28_PUT_api_admin_posts_x_1(_con)
  local _api = "PUT /api/admin/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 149
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 149, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 150
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 150, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 151
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 151, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 152
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 152, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 153 (ignored write)  -- line 154
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 154, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 155
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 155, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
-- line 156 (ignored write)
end

function API_28_PUT_api_admin_posts_x_2(_con)
  local _api = "PUT /api/admin/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 157
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 157, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 158
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 158, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 159
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 159, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 160
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 160, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 161 (ignored write)  -- line 162
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 162, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 163
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 163, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 164
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 164, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 165
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 165, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 166 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 167 (ignored write)  _commit_f(_con, false)
  
end

function API_29_POST_api_admin_login_1(_con)
  local _api = "POST /api/admin/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 168
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 168, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 169 (ignored write)  _commit_f(_con, false)
  
end

function API_29_POST_api_admin_login_2(_con)
  local _api = "POST /api/admin/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 170
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 170, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 171
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 171, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_29_POST_api_admin_login_3(_con)
  local _api = "POST /api/admin/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 172
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 172, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_30_GET_api_admin_themes_files_custom_1(_con)
  local _api = "GET /api/admin/themes/files/custom"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 173
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 173, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_31_PUT_api_admin_tags_x_1(_con)
  local _api = "PUT /api/admin/tags/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 174
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 174, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 175
  _sql = [[
  SELECT tag0_.id AS id1_13_0_, tag0_.create_time AS create_t2_13_0_, tag0_.deleted AS deleted3_13_0_, tag0_.update_time AS update_t4_13_0_, tag0_.name AS name5_13_0_
  	, tag0_.slug_name AS slug_nam6_13_0_
  FROM tags tag0_
  WHERE tag0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 175, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 176
  _sql = [[
  SELECT tag0_.id AS id1_13_0_, tag0_.create_time AS create_t2_13_0_, tag0_.deleted AS deleted3_13_0_, tag0_.update_time AS update_t4_13_0_, tag0_.name AS name5_13_0_
  	, tag0_.slug_name AS slug_nam6_13_0_
  FROM tags tag0_
  WHERE tag0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 176, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_32_POST_api_admin_themes_reload_1(_con)
  local _api = "POST /api/admin/themes/reload"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 177
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 177, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_33_PUT_api_admin_sheets_x_RECYCLE_1(_con)
  local _api = "PUT /api/admin/sheets/3/RECYCLE"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 178
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 178, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 179
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 179, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 180
  _sql = [[
  SELECT sheet0_.id AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.id <> %s
  	AND sheet0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 180, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 181
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 181, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 182 (ignored write)  _commit_f(_con, true)
  
end

function API_34_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/21/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 183
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 183, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 184
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 184, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 185
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 185, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 186 (ignored write)  _commit_f(_con, true)
  
end

function API_35_PUT_api_admin_users_profiles_1(_con)
  local _api = "PUT /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 187
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 187, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 188
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 188, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 189 (ignored write)  -- line 190
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 190, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
-- line 191 (ignored write)
end

function API_36_GET_api_admin_posts_comments_latest_1(_con)
  local _api = "GET /api/admin/posts/comments/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 192
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 192, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 193
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 193, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 194
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 194, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_36_GET_api_admin_posts_comments_latest_2(_con)
  local _api = "GET /api/admin/posts/comments/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 195
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 195, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 196
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 196, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_37_GET_search_page_x_1(_con)
  local _api = "GET /search/page/4"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 197
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 197, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 198
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 198, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 199
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 199, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 200
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 200, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 201
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 201, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 202
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 202, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 203
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 203, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 204
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 204, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 205
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 205, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 206
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 206, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 207
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 207, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 208
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 208, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 209
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 209, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 210
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 210, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 211
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 211, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_38_POST_api_admin_posts_comments_1(_con)
  local _api = "POST /api/admin/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 212
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 212, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 213
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 213, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 214
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 214, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 215 (ignored write)  _commit_f(_con, false)
  
end

function API_39_GET_search_page_x_1(_con)
  local _api = "GET /search/page/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 216
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 216, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 217
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 217, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 218
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 218, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 219
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 219, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 220
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 220, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 221
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 221, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 222
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 222, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 223
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 223, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 224
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 224, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 225
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 225, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 226
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 226, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 227
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 227, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 228
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 228, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 229
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 229, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 230
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 230, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_40_GET_search_page_x_1(_con)
  local _api = "GET /search/page/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 231
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 231, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 232
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 232, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 233
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 233, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 234
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 234, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 235
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 235, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 236
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 236, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 237
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 237, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 238
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 238, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 239
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 239, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 240
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 240, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 241
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 241, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 242
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 242, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 243
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 243, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 244
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 244, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 245
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 245, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_41_POST_api_admin_themes_SumiMakito_Journal_activation_1(_con)
  local _api = "POST /api/admin/themes/SumiMakito_Journal/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 246
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 246, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 247
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 247, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 248 (ignored write)  -- line 249
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 249, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 250
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 250, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 251
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 251, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_42_GET_api_admin_attachments_media_types_1(_con)
  local _api = "GET /api/admin/attachments/media_types"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 252
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 252, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 253
  _sql = [[
  SELECT DISTINCT attachment0_.media_type AS col_0_0_
  FROM attachments attachment0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 253, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_43_GET_tags_x_1(_con)
  local _api = "GET /tags/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 254
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 254, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 255
  _sql = [[
  SELECT posttag0_.post_id AS col_0_0_
  FROM post_tags posttag0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND posttag0_.tag_id = %s
  	AND post1_.id = posttag0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 255, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 256
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 256, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 257
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 257, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 258
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 258, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 259
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 259, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 260
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 260, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 261
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 261, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 262
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 262, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 263
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 263, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 264
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 264, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 265
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 265, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 266
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 266, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 267
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 267, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 268
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 268, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 269
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 269, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 270
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 270, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 271
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 271, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 272
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 272, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_44_POST_api_admin_journals_comments_1(_con)
  local _api = "POST /api/admin/journals/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 273
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 273, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 274
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 274, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 275
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 275, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 276 (ignored write)  _commit_f(_con, false)
  
end

function API_45_GET_api_content_journals_x_comments_x_children_1(_con)
  local _api = "GET /api/content/journals/2/comments/11/children"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 277
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  	AND journalcom0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 277, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 278
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.status = %s
  	AND journalcom0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 278, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_46_DELETE_api_admin_menus_x_1(_con)
  local _api = "DELETE /api/admin/menus/11"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 279
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 279, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 280
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  WHERE menu0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 280, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 281
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 281, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 282 (ignored write)  _commit_f(_con, true)
  
end

function API_47_GET_archives_x_1(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 283
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 283, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 284
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 284, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 285 (ignored write)  _commit_f(_con, true)
  
  -- line 286
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 286, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 287
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 287, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 288
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 288, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 289
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 289, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 290
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 290, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 291
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 291, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 292
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 292, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 293
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 293, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_2(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 294
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 294, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 295 (ignored write)  -- line 296
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 296, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 297
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 297, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 298
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 298, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 299
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 299, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 300
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 300, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 301
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 301, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 302
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 302, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 303
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 303, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 304
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 304, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_3(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 305
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 305, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 306
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 306, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 307
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 307, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 308 (ignored write)  _commit_f(_con, true)
  
  -- line 309
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 309, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 310
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 310, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 311
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 311, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 312
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 312, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 313
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 313, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 314
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 314, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 315
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 315, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 316
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 316, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 317
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 317, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_4(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 318
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 318, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 319
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 319, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 320 (ignored write)  _commit_f(_con, true)
  
  -- line 321
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 321, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 322
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 322, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 323
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 323, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 324
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 324, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 325
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 325, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 326
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 326, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 327
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 327, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 328
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 328, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 329
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 329, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 330
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 330, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_5(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 331
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 331, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 332 (ignored write)  -- line 333
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 333, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 334
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 334, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 335
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 335, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 336
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 336, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 337
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 337, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 338
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 338, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 339
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 339, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 340
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 340, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 341
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 341, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 342
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 342, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 343
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 343, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_6(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 344
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 344, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 345
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 345, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 346 (ignored write)  -- line 347
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 347, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 348
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 348, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 349
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 349, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 350
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 350, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 351
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 351, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 352
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 352, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 353
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 353, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 354
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 354, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 355
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 355, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 356
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 356, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_archives_x_7(_con)
  local _api = "GET /archives/2019102320564682967"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 357
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 357, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 358
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 358, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 359 (ignored write)  _commit_f(_con, true)
  
  -- line 360
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 360, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 361
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 361, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 362
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 362, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 363
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 363, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 364
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 364, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 365
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 365, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 366
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 366, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 367
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 367, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 368
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 368, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 369
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 369, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 370
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 370, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 371
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 371, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 372
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 372, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 373
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 373, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 374
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 374, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_48_POST_api_admin_categories_1(_con)
  local _api = "POST /api/admin/categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 375
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 375, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 376
  _sql = [[
  SELECT COUNT(category0_.id) AS col_0_0_
  FROM categories category0_
  WHERE category0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 376, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 377 (ignored write)  _commit_f(_con, true)
  
end

function API_49_GET_api_admin_journals_x_comments_tree_view_1(_con)
  local _api = "GET /api/admin/journals/2/comments/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 378
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 378, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 379
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 379, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_50_GET_api_content_journals_x_comments_top_view_1(_con)
  local _api = "GET /api/content/journals/1/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 380
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  	AND journalcom0_.parent_id = %s
  ORDER BY journalcom0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 380, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_51_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/8/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 381
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 381, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 382
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 382, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 383
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 383, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 384 (ignored write)  _commit_f(_con, true)
  
end

function API_52_PUT_api_admin_themes_viosey_material_files_content_1(_con)
  local _api = "PUT /api/admin/themes/viosey_material/files/content"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 385
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 385, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_53_POST_api_admin_themes_caicai_anatole_activation_1(_con)
  local _api = "POST /api/admin/themes/caicai_anatole/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 386
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 386, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 387
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 387, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 388 (ignored write)  -- line 389
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 389, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 390
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 390, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 391
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 391, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_54_GET_api_admin_options_map_view_1(_con)
  local _api = "GET /api/admin/options/map_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 392
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 392, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_55_POST_api_admin_themes_SumiMakito_Journal_settings_1(_con)
  local _api = "POST /api/admin/themes/SumiMakito_Journal/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 393
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 393, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 394
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 394, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 395 (ignored write)  -- line 396
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 396, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 397 (ignored write)  -- line 398
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 398, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 399 (ignored write)  -- line 400
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 400, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_55_POST_api_admin_themes_SumiMakito_Journal_settings_2(_con)
  local _api = "POST /api/admin/themes/SumiMakito_Journal/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 401
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 401, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 402
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 402, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 403
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 403, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 404
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 404, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 405
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 405, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_56_GET_api_admin_counts_1(_con)
  local _api = "GET /api/admin/counts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 406
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 406, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 407
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 407, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 408
  _sql = [[
  SELECT COUNT(sheet0_.id) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 408, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 409
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM attachments attachment0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 409, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 410
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 410, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 411
  _sql = [[
  SELECT COUNT(sheetcomme0_.id) AS col_0_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 411, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 412
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 412, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 413
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM links link0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 413, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 414
  _sql = [[
  SELECT SUM(post0_.visits) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 414, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 415
  _sql = [[
  SELECT SUM(sheet0_.visits) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 415, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 416
  _sql = [[
  SELECT SUM(post0_.likes) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 416, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 417
  _sql = [[
  SELECT SUM(sheet0_.likes) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 417, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_57_PUT_api_admin_themes_fetching_SumiMakito_Journal_1(_con)
  local _api = "PUT /api/admin/themes/fetching/SumiMakito_Journal"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 418
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 418, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 419
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 419, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 420
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 420, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 421
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 421, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 422
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 422, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 423
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 423, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_58_PUT_api_admin_sheets_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/sheets/comments/6/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 424
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 424, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 425
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 425, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 426
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 426, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 427 (ignored write)  _commit_f(_con, true)
  
end

function API_59_GET_page_x_1(_con)
  local _api = "GET /page/111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 428
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 428, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 429
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 429, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 430
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 430, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_60_GET_api_content_posts_x_1(_con)
  local _api = "GET /api/content/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 431
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 431, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 432
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 432, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 433
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 433, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_61_GET_api_admin_posts_x_1(_con)
  local _api = "GET /api/admin/posts/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 434
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 434, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 435
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 435, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 436
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 436, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 437
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 437, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 438
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 438, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_62_GET_api_admin_logs_clear_1(_con)
  local _api = "GET /api/admin/logs/clear"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 439
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 439, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 440
  _sql = [[
  SELECT log0_.id AS id1_5_, log0_.create_time AS create_t2_5_, log0_.deleted AS deleted3_5_, log0_.update_time AS update_t4_5_, log0_.content AS content5_5_
  	, log0_.ip_address AS ip_addre6_5_, log0_.log_key AS log_key7_5_, log0_.type AS type8_5_
  FROM logs log0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 440, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 441 (ignored write)-- line 442 (ignored write)-- line 443 (ignored write)-- line 444 (ignored write)-- line 445 (ignored write)-- line 446 (ignored write)-- line 447 (ignored write)-- line 448 (ignored write)-- line 449 (ignored write)-- line 450 (ignored write)-- line 451 (ignored write)-- line 452 (ignored write)-- line 453 (ignored write)-- line 454 (ignored write)-- line 455 (ignored write)  _commit_f(_con, true)
  
end

function API_63_GET_api_admin_posts_x_1(_con)
  local _api = "GET /api/admin/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 456
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 456, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 457
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 457, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 458
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 458, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 459
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 459, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_63_GET_api_admin_posts_x_2(_con)
  local _api = "GET /api/admin/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 460
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 460, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 461
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 461, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 462
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 462, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 463
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 463, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 464
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 464, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_64_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/12/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 465
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 465, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_64_GET_api_content_posts_x_comments_top_view_2(_con)
  local _api = "GET /api/content/posts/12/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 466
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 466, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_65_GET_api_content_photos_1(_con)
  local _api = "GET /api/content/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 467
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  WHERE 1 = 1
  ORDER BY photo0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 467, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_66_POST_api_admin_links_1(_con)
  local _api = "POST /api/admin/links"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 468
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 468, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 469
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  WHERE link0_.deleted = %s
  	AND link0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "links", "deleted", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "links", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 469, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 470 (ignored write)  _commit_f(_con, false)
  
end

function API_67_PUT_api_admin_sheets_comments_x_status_RECYCLE_1(_con)
  local _api = "PUT /api/admin/sheets/comments/9/status/RECYCLE"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 471
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 471, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 472
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 472, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 473
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 473, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 474 (ignored write)  _commit_f(_con, true)
  
end

function API_68_GET_api_admin_themes_viosey_material_settings_1(_con)
  local _api = "GET /api/admin/themes/viosey_material/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 475
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 475, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 476
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 476, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_69_POST_api_admin_sheets_comments_1(_con)
  local _api = "POST /api/admin/sheets/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 477
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 477, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 478
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 478, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 479
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 479, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 480 (ignored write)  _commit_f(_con, false)
  
end

function API_70_DELETE_api_admin_menus_x_1(_con)
  local _api = "DELETE /api/admin/menus/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 481
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 481, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 482
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  WHERE menu0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 482, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 483
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.id <> %s
  	AND menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 483, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 484
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 484, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 485 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 486
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 486, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 487 (ignored write)  _commit_f(_con, true)
  
end

function API_71_DELETE_api_admin_menus_x_1(_con)
  local _api = "DELETE /api/admin/menus/8"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 488
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 488, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 489
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  WHERE menu0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 489, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 490
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 490, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 491 (ignored write)  _commit_f(_con, true)
  
end

function API_72_PUT_api_admin_links_x_1(_con)
  local _api = "PUT /api/admin/links/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 492
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 492, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 493
  _sql = [[
  SELECT link0_.id AS id1_4_0_, link0_.create_time AS create_t2_4_0_, link0_.deleted AS deleted3_4_0_, link0_.update_time AS update_t4_4_0_, link0_.description AS descript5_4_0_
  	, link0_.logo AS logo6_4_0_, link0_.name AS name7_4_0_, link0_.priority AS priority8_4_0_, link0_.team AS team9_4_0_, link0_.url AS url10_4_0_
  FROM links link0_
  WHERE link0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "links", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 493, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 494
  _sql = [[
  SELECT link0_.id AS id1_4_0_, link0_.create_time AS create_t2_4_0_, link0_.deleted AS deleted3_4_0_, link0_.update_time AS update_t4_4_0_, link0_.description AS descript5_4_0_
  	, link0_.logo AS logo6_4_0_, link0_.name AS name7_4_0_, link0_.priority AS priority8_4_0_, link0_.team AS team9_4_0_, link0_.url AS url10_4_0_
  FROM links link0_
  WHERE link0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "links", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 494, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 495 (ignored write)  _commit_f(_con, true)
  
end

function API_73_GET_atom_xml_1(_con)
  local _api = "GET /atom.xml"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 496
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 496, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 497
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 497, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 498
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 498, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 499
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 499, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 500
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 500, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 501
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 501, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 502
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 502, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_74_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/4/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 503
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 503, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_PUT_api_admin_journals_x_1(_con)
  local _api = "PUT /api/admin/journals/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 504
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 504, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 505
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 505, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 506
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 506, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_76_DELETE_api_admin_themes_viosey_material_1(_con)
  local _api = "DELETE /api/admin/themes/viosey_material"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 507
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 507, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_77_PUT_api_admin_journals_x_1(_con)
  local _api = "PUT /api/admin/journals/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 508
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 508, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 509
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 509, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 510
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 510, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 511 (ignored write)  _commit_f(_con, true)
  
end

function API_78_DELETE_api_admin_categories_x_1(_con)
  local _api = "DELETE /api/admin/categories/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 512
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 512, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 513
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 513, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 514
  _sql = [[
  SELECT category0_.id AS id1_1_0_, category0_.create_time AS create_t2_1_0_, category0_.deleted AS deleted3_1_0_, category0_.update_time AS update_t4_1_0_, category0_.description AS descript5_1_0_
  	, category0_.name AS name6_1_0_, category0_.parent_id AS parent_i7_1_0_, category0_.slug_name AS slug_nam8_1_0_
  FROM categories category0_
  WHERE category0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 514, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 515
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.category_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 515, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 516 (ignored write)  _commit_f(_con, true)
  
end

function API_79_GET_api_content_menus_1(_con)
  local _api = "GET /api/content/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 517
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ORDER BY menu0_.priority DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 517, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_80_GET_api_admin_themes_1(_con)
  local _api = "GET /api/admin/themes"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 518
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 518, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_81_DELETE_api_admin_tags_x_1(_con)
  local _api = "DELETE /api/admin/tags/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 519
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 519, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 520
  _sql = [[
  SELECT tag0_.id AS id1_13_0_, tag0_.create_time AS create_t2_13_0_, tag0_.deleted AS deleted3_13_0_, tag0_.update_time AS update_t4_13_0_, tag0_.name AS name5_13_0_
  	, tag0_.slug_name AS slug_nam6_13_0_
  FROM tags tag0_
  WHERE tag0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 520, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 521 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 522
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.tag_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 522, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_82_POST_api_admin_installations_1(_con)
  local _api = "POST /api/admin/installations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 523
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 523, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 524 (ignored write)-- line 525 (ignored write)-- line 526 (ignored write)-- line 527 (ignored write)-- line 528 (ignored write)  -- line 529
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 529, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 530
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 530, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 531
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 531, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 532
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 532, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 533 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 534
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 534, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 535
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 535, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 536
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 536, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 537
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 537, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 538 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 539
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 539, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 540 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 541
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 541, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 542
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 542, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 543 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 544
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 544, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 545 (ignored write)  _commit_f(_con, true)
  
end

function API_82_POST_api_admin_installations_2(_con)
  local _api = "POST /api/admin/installations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 546
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 546, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 547 (ignored write)-- line 548 (ignored write)-- line 549 (ignored write)-- line 550 (ignored write)-- line 551 (ignored write)  -- line 552
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 552, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 553
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 553, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 554
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 554, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 555
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 555, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 556 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 557
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 557, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 558
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 558, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 559
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 559, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 560
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 560, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 561 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 562
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 562, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 563 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 564
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 564, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 565
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 565, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 566 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 567
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 567, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 568 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 569 (ignored write)  _commit_f(_con, false)
  
end

function API_83_DELETE_api_admin_sheets_comments_x_1(_con)
  local _api = "DELETE /api/admin/sheets/comments/4"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 570
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 570, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 571
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 571, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 572 (ignored write)  _commit_f(_con, true)
  
end

function API_84_GET_api_content_menus_tree_view_1(_con)
  local _api = "GET /api/content/menus/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 573
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ORDER BY menu0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 573, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_85_PUT_api_admin_posts_x_1(_con)
  local _api = "PUT /api/admin/posts/14"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 574
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 574, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 575
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 575, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 576
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 576, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 577
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 577, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 578 (ignored write)  -- line 579
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 579, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 580
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 580, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 581
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 581, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 582
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 582, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 583 (ignored write)  _commit_f(_con, true)
  
-- line 584 (ignored write)
end

function API_85_PUT_api_admin_posts_x_2(_con)
  local _api = "PUT /api/admin/posts/14"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 585
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 585, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 586
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 586, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 587
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 587, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 588
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 588, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 589 (ignored write)  -- line 590
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 590, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 591
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 591, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 592
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 592, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 593
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 593, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 594
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 594, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 595 (ignored write)-- line 596 (ignored write)  -- line 597
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 597, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 598 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 599 (ignored write)  _commit_f(_con, false)
  
end

function API_86_DELETE_api_admin_attachments_x_1(_con)
  local _api = "DELETE /api/admin/attachments/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 600
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 600, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 601
  _sql = [[
  SELECT attachment0_.id AS id1_0_0_, attachment0_.create_time AS create_t2_0_0_, attachment0_.deleted AS deleted3_0_0_, attachment0_.update_time AS update_t4_0_0_, attachment0_.file_key AS file_key5_0_0_
  	, attachment0_.height AS height6_0_0_, attachment0_.media_type AS media_ty7_0_0_, attachment0_.name AS name8_0_0_, attachment0_.path AS path9_0_0_, attachment0_.size AS size10_0_0_
  	, attachment0_.suffix AS suffix11_0_0_, attachment0_.thumb_path AS thumb_p12_0_0_, attachment0_.type AS type13_0_0_, attachment0_.width AS width14_0_0_
  FROM attachments attachment0_
  WHERE attachment0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 601, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 602
  _sql = [[
  SELECT attachment0_.id AS id1_0_0_, attachment0_.create_time AS create_t2_0_0_, attachment0_.deleted AS deleted3_0_0_, attachment0_.update_time AS update_t4_0_0_, attachment0_.file_key AS file_key5_0_0_
  	, attachment0_.height AS height6_0_0_, attachment0_.media_type AS media_ty7_0_0_, attachment0_.name AS name8_0_0_, attachment0_.path AS path9_0_0_, attachment0_.size AS size10_0_0_
  	, attachment0_.suffix AS suffix11_0_0_, attachment0_.thumb_path AS thumb_p12_0_0_, attachment0_.type AS type13_0_0_, attachment0_.width AS width14_0_0_
  FROM attachments attachment0_
  WHERE attachment0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 602, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 603 (ignored write)  _commit_f(_con, true)
  
end

function API_87_POST_api_admin_themes_caicai_anatole_settings_1(_con)
  local _api = "POST /api/admin/themes/caicai_anatole/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 604
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 604, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 605
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 605, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 606 (ignored write)  -- line 607
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 607, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 608 (ignored write)  -- line 609
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 609, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 610 (ignored write)  -- line 611
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 611, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 612 (ignored write)  -- line 613
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 613, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 614 (ignored write)  -- line 615
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 615, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 616 (ignored write)  -- line 617
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 617, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 618 (ignored write)  -- line 619
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 619, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 620 (ignored write)  -- line 621
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 621, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_87_POST_api_admin_themes_caicai_anatole_settings_2(_con)
  local _api = "POST /api/admin/themes/caicai_anatole/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 622
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 622, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 623
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 623, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 624
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 624, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 625
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 625, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 626
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 626, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 627
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 627, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 628
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 628, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 629
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 629, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 630
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 630, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 631
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 631, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 632 (ignored write)  -- line 633
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 633, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_87_POST_api_admin_themes_caicai_anatole_settings_3(_con)
  local _api = "POST /api/admin/themes/caicai_anatole/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 634
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 634, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 635
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 635, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 636
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 636, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 637
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 637, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 638
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 638, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 639
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 639, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 640
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 640, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 641
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 641, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 642
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 642, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 643
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 643, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 644
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 644, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_87_POST_api_admin_themes_caicai_anatole_settings_4(_con)
  local _api = "POST /api/admin/themes/caicai_anatole/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 645
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 645, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 646
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 646, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 647 (ignored write)  -- line 648
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 648, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 649
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 649, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 650 (ignored write)  -- line 651
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 651, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 652 (ignored write)  -- line 653
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 653, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 654 (ignored write)  -- line 655
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 655, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 656
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 656, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 657 (ignored write)  -- line 658
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 658, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 659
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 659, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 660
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 660, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 661 (ignored write)  -- line 662
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 662, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_88_GET_api_content_sheets_x_1(_con)
  local _api = "GET /api/content/sheets/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 663
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 663, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_89_DELETE_api_admin_journals_x_1(_con)
  local _api = "DELETE /api/admin/journals/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 664
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 664, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 665
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 665, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 666 (ignored write)  _commit_f(_con, true)
  
end

function API_90_GET_api_content_sheets_x_1(_con)
  local _api = "GET /api/content/sheets/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 667
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 667, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_91_GET_categories_1(_con)
  local _api = "GET /categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 668
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 668, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 669
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 669, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 670
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 670, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 671
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 671, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 672
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 672, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_91_GET_categories_2(_con)
  local _api = "GET /categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 673
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 673, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 674
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 674, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 675
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 675, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 676
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 676, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 677
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 677, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 678
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 678, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 679
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 679, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 680
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 680, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 681
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 681, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 682
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 682, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 683
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 683, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_91_GET_categories_3(_con)
  local _api = "GET /categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 684
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 684, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 685
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 685, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 686
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 686, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 687
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 687, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 688
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 688, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 689
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 689, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 690
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 690, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 691
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 691, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 692
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 692, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 693
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 693, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 694
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 694, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 695
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 695, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 696
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 696, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 697
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 697, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 698
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 698, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 699
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 699, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_92_GET_archives_x_1(_con)
  local _api = "GET /archives/2019102320563429480"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 700
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 700, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 701
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 701, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 702
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 702, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 703 (ignored write)  _commit_f(_con, true)
  
  -- line 704
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 704, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 705
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 705, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 706
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 706, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 707
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 707, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 708
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 708, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 709
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 709, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 710
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 710, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 711
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 711, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_92_GET_archives_x_2(_con)
  local _api = "GET /archives/2019102320563429480"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 712
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 712, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 713
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 713, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 714
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 714, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 715
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 715, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 716
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 716, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 717 (ignored write)  _commit_f(_con, true)
  
  -- line 718
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 718, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 719
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 719, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 720
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 720, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 721
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 721, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 722
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 722, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 723
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 723, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 724
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 724, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_92_GET_archives_x_3(_con)
  local _api = "GET /archives/2019102320563429480"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 725
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 725, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 726 (ignored write)  -- line 727
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 727, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 728
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 728, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 729
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 729, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 730
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 730, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 731
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 731, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 732
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 732, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 733
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 733, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 734
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 734, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 735
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 735, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 736
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 736, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 737
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 737, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_92_GET_archives_x_4(_con)
  local _api = "GET /archives/2019102320563429480"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 738
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 738, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 739
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 739, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 740 (ignored write)  _commit_f(_con, true)
  
  -- line 741
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 741, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 742
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 742, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 743
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 743, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 744
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 744, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 745
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 745, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 746
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 746, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 747
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 747, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 748
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 748, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 749
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 749, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 750
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 750, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 751
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 751, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 752
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 752, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_92_GET_archives_x_5(_con)
  local _api = "GET /archives/2019102320563429480"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 753
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 753, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 754 (ignored write)  -- line 755
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 755, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 756
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 756, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 757
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 757, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 758
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 758, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 759
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 759, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 760
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 760, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 761
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 761, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 762
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 762, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 763
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 763, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 764
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 764, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 765
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 765, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 766
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 766, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 767
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 767, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_93_POST_api_admin_menus_1(_con)
  local _api = "POST /api/admin/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 768
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 768, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 769
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 769, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 770 (ignored write)  _commit_f(_con, false)
  
end

function API_93_POST_api_admin_menus_2(_con)
  local _api = "POST /api/admin/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 771
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 771, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_93_POST_api_admin_menus_3(_con)
  local _api = "POST /api/admin/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 772
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 772, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 773
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 773, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_94_GET_api_content_links_team_view_1(_con)
  local _api = "GET /api/content/links/team_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 774
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 774, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_95_GET_api_admin_sheets_internal_1(_con)
  local _api = "GET /api/admin/sheets/internal"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 775
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 775, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_96_GET_tags_1(_con)
  local _api = "GET /tags"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 776
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 776, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 777
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 777, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 778
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 778, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 779
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 779, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 780
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 780, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 781
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 781, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 782
  _sql = [[
  SELECT posttag0_.post_id AS col_0_0_
  FROM post_tags posttag0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND posttag0_.tag_id = %s
  	AND post1_.id = posttag0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 782, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 783
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 783, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 784
  _sql = [[
  SELECT posttag0_.post_id AS col_0_0_
  FROM post_tags posttag0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND posttag0_.tag_id = %s
  	AND post1_.id = posttag0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 784, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 785
  _sql = [[
  SELECT posttag0_.post_id AS col_0_0_
  FROM post_tags posttag0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND posttag0_.tag_id = %s
  	AND post1_.id = posttag0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 785, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 786
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 786, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 787
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 787, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 788
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 788, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_97_GET_api_content_journals_x_1(_con)
  local _api = "GET /api/content/journals/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 789
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 789, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_98_GET_api_content_journals_x_1(_con)
  local _api = "GET /api/content/journals/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 790
  _sql = [[
  SELECT journal0_.id AS id1_3_0_, journal0_.create_time AS create_t2_3_0_, journal0_.deleted AS deleted3_3_0_, journal0_.update_time AS update_t4_3_0_, journal0_.content AS content5_3_0_
  	, journal0_.likes AS likes6_3_0_, journal0_.type AS type7_3_0_
  FROM journals journal0_
  WHERE journal0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 790, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_99_GET_links_1(_con)
  local _api = "GET /links"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 791
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 791, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 792
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 792, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_99_GET_links_2(_con)
  local _api = "GET /links"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 793
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 793, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 794
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 794, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 795
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 795, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 796
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 796, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 797
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 797, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_100_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/22/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 798
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 798, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 799
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 799, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 800
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 800, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 801 (ignored write)  _commit_f(_con, true)
  
end

function API_101_POST_api_admin_attachments_upload_1(_con)
  local _api = "POST /api/admin/attachments/upload"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 802
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 802, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 803
  _sql = [[
  SELECT COUNT(attachment0_.id) AS col_0_0_
  FROM attachments attachment0_
  WHERE attachment0_.path = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "path", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 803, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 804 (ignored write)  _commit_f(_con, false)
  
end

function API_101_POST_api_admin_attachments_upload_2(_con)
  local _api = "POST /api/admin/attachments/upload"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 805
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 805, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_102_POST_api_content_posts_x_likes_1(_con)
  local _api = "POST /api/content/posts/1/likes"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 806 (ignored write)  _commit_f(_con, false)
  
end

function API_103_POST_api_admin_options_map_view_saving_1(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 807
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 807, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 808
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 808, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 809 (ignored write)-- line 810 (ignored write)-- line 811 (ignored write)-- line 812 (ignored write)-- line 813 (ignored write)-- line 814 (ignored write)-- line 815 (ignored write)-- line 816 (ignored write)-- line 817 (ignored write)-- line 818 (ignored write)-- line 819 (ignored write)-- line 820 (ignored write)-- line 821 (ignored write)-- line 822 (ignored write)-- line 823 (ignored write)-- line 824 (ignored write)-- line 825 (ignored write)-- line 826 (ignored write)-- line 827 (ignored write)-- line 828 (ignored write)-- line 829 (ignored write)-- line 830 (ignored write)-- line 831 (ignored write)-- line 832 (ignored write)  -- line 833
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 833, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 834
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 834, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_2(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 835
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 835, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 836
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 836, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 837 (ignored write)-- line 838 (ignored write)-- line 839 (ignored write)  -- line 840
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 840, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 841
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 841, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_3(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 842
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 842, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 843
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 843, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 844 (ignored write)-- line 845 (ignored write)  -- line 846
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 846, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 847
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 847, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_4(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 848
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 848, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 849
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 849, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 850 (ignored write)  -- line 851
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 851, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 852
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 852, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_5(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 853
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 853, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 854
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 854, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 855 (ignored write)-- line 856 (ignored write)  -- line 857
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 857, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 858
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 858, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_6(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 859
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 859, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 860
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 860, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 861 (ignored write)-- line 862 (ignored write)-- line 863 (ignored write)-- line 864 (ignored write)-- line 865 (ignored write)-- line 866 (ignored write)-- line 867 (ignored write)-- line 868 (ignored write)-- line 869 (ignored write)-- line 870 (ignored write)-- line 871 (ignored write)-- line 872 (ignored write)-- line 873 (ignored write)-- line 874 (ignored write)-- line 875 (ignored write)-- line 876 (ignored write)-- line 877 (ignored write)-- line 878 (ignored write)-- line 879 (ignored write)-- line 880 (ignored write)-- line 881 (ignored write)-- line 882 (ignored write)-- line 883 (ignored write)-- line 884 (ignored write)-- line 885 (ignored write)-- line 886 (ignored write)-- line 887 (ignored write)  -- line 888
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 888, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 889
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 889, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_103_POST_api_admin_options_map_view_saving_7(_con)
  local _api = "POST /api/admin/options/map_view/saving"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 890
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 890, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 891
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 891, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_104_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/1/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 892
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 892, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_105_GET_api_content_journals_x_comments_list_view_1(_con)
  local _api = "GET /api/content/journals/2/comments/list_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 893
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  ORDER BY journalcom0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 893, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 894
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.id IN (%s)
  ORDER BY journalcom0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 894, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_106_POST_api_admin_photos_1(_con)
  local _api = "POST /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 895
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 895, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_106_POST_api_admin_photos_2(_con)
  local _api = "POST /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 896
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 896, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 897 (ignored write)  _commit_f(_con, false)
  
end

function API_107_GET_archives_hello_halo_1(_con)
  local _api = "GET /archives/hello-halo"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 898
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 898, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 899
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 899, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 900
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 900, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 901 (ignored write)  _commit_f(_con, false)
  
  -- line 902
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 902, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 903
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 903, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 904
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 904, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 905
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 905, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 906
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 906, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 907
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 907, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_107_GET_archives_hello_halo_2(_con)
  local _api = "GET /archives/hello-halo"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 908
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 908, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 909
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 909, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 910
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 910, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 911
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 911, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 912 (ignored write)  _commit_f(_con, true)
  
  -- line 913
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 913, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 914
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 914, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 915
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 915, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 916
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 916, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 917
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 917, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 918
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 918, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_107_GET_archives_hello_halo_3(_con)
  local _api = "GET /archives/hello-halo"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 919
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 919, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 920
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 920, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 921 (ignored write)  _commit_f(_con, true)
  
  -- line 922
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 922, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 923
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 923, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 924
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 924, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 925
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 925, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 926
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 926, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 927
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 927, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 928
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 928, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 929
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 929, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_108_GET_api_admin_posts_comments_1(_con)
  local _api = "GET /api/admin/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 930
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 930, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 931
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND 1 = 1
  ORDER BY postcommen0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 931, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 932
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 932, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_108_GET_api_admin_posts_comments_2(_con)
  local _api = "GET /api/admin/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 933
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 933, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 934
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  ORDER BY postcommen0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 934, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 935
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 935, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_108_GET_api_admin_posts_comments_3(_con)
  local _api = "GET /api/admin/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 936
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 936, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 937
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND (postcommen0_.author LIKE %s
  		OR postcommen0_.content LIKE %s
  		OR postcommen0_.email LIKE %s)
  ORDER BY postcommen0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "author", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "content", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 937, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_108_GET_api_admin_posts_comments_4(_con)
  local _api = "GET /api/admin/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 938
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 938, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 939
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND 1 = 1
  ORDER BY postcommen0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 939, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 940
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND 1 = 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 940, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 941
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 941, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_109_GET_api_content_journals_1(_con)
  local _api = "GET /api/content/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 942
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 942, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 943
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.post_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id IN (%s)
  GROUP BY journalcom0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 943, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_110_GET_api_content_categories_x_posts_1(_con)
  local _api = "GET /api/content/categories/111/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 944
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 944, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 945
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 945, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_111_GET_api_content_sheets_1(_con)
  local _api = "GET /api/content/sheets"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 946
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.status = %s
  ORDER BY sheet0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 946, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_112_GET_api_admin_categories_1(_con)
  local _api = "GET /api/admin/categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 947
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 947, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 948
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 948, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_112_GET_api_admin_categories_2(_con)
  local _api = "GET /api/admin/categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 949
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 949, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 950
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 950, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 951
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 951, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_113_GET_archives_x_1(_con)
  local _api = "GET /archives/111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 952
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 952, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_114_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/25/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 953
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 953, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 954
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 954, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 955
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 955, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 956 (ignored write)  _commit_f(_con, true)
  
end

function API_115_GET_api_admin_menus_tree_view_1(_con)
  local _api = "GET /api/admin/menus/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 957
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 957, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 958
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ORDER BY menu0_.priority ASC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 958, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_116_GET_api_content_journals_x_comments_tree_view_1(_con)
  local _api = "GET /api/content/journals/2/comments/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 959
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 959, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_117_GET_archives_1(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 960
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 960, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 961
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 961, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 962
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 962, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_117_GET_archives_2(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 963
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 963, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 964
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 964, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 965
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 965, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 966
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 966, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 967
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 967, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_117_GET_archives_3(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 968
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 968, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 969
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 969, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 970
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 970, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 971
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 971, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 972
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 972, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 973
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 973, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 974
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 974, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_117_GET_archives_4(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 975
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 975, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 976
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 976, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 977
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 977, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 978
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 978, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 979
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 979, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 980
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 980, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 981
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 981, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_117_GET_archives_5(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 982
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 982, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 983
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 983, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 984
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 984, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 985
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 985, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 986
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 986, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 987
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 987, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 988
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 988, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 989
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 989, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 990
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 990, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 991
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 991, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_117_GET_archives_6(_con)
  local _api = "GET /archives"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 992
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 992, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 993
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 993, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 994
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 994, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 995
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 995, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 996
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 996, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 997
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 997, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_118_GET_api_content_posts_x_comments_tree_view_1(_con)
  local _api = "GET /api/content/posts/1/comments/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 998
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 998, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_119_DELETE_api_admin_links_x_1(_con)
  local _api = "DELETE /api/admin/links/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 999
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 999, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1000
  _sql = [[
  SELECT link0_.id AS id1_4_0_, link0_.create_time AS create_t2_4_0_, link0_.deleted AS deleted3_4_0_, link0_.update_time AS update_t4_4_0_, link0_.description AS descript5_4_0_
  	, link0_.logo AS logo6_4_0_, link0_.name AS name7_4_0_, link0_.priority AS priority8_4_0_, link0_.team AS team9_4_0_, link0_.url AS url10_4_0_
  FROM links link0_
  WHERE link0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "links", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1000, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1001 (ignored write)  _commit_f(_con, true)
  
end

function API_120_GET_archives_page_x_1(_con)
  local _api = "GET /archives/page/4"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1002
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1002, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1003
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1003, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1004
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1004, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1005
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1005, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1006
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1006, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1007
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1007, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1008
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1008, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1009
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1009, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1010
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1010, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_121_GET_archives_page_x_1(_con)
  local _api = "GET /archives/page/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1011
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1011, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1012
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1012, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1013
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1013, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1014
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1014, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1015
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1015, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1016
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1016, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1017
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1017, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1018
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1018, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1019
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1019, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_122_GET_archives_page_x_1(_con)
  local _api = "GET /archives/page/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1020
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1020, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1021
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1021, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1022
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1022, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1023
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1023, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1024
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1024, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1025
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1025, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1026
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1026, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1027
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1027, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1028
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1028, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_123_GET_api_admin_posts_preview_x_1(_con)
  local _api = "GET /api/admin/posts/preview/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1029
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1029, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1030
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1030, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_124_GET_archives_x_1(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1031
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1031, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1032
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1032, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1033
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1033, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1034
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1034, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 1035 (ignored write)
  -- line 1036
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1036, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1037
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1037, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1038
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1038, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1039
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1039, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1040
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1040, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1041
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1041, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1042
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1042, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1043
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1043, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1044
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1044, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1045
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1045, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_124_GET_archives_x_2(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1046
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1046, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1047
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1047, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1048
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1048, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1049
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1049, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1050
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1050, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


-- line 1051 (ignored write)
  -- line 1052
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1052, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1053
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1053, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1054
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1054, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1055
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1055, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_124_GET_archives_x_3(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1056
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1056, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1057
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1057, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1058 (ignored write)  _commit_f(_con, true)
  
  -- line 1059
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1059, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1060
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1060, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1061
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1061, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1062
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1062, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1063
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1063, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1064
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1064, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1065
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1065, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1066
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1066, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_124_GET_archives_x_4(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1067
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1067, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 1068 (ignored write)  -- line 1069
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1069, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1070
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1070, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1071
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1071, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1072
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1072, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1073
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1073, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1074
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1074, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1075
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1075, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1076
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1076, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1077
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1077, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_124_GET_archives_x_5(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1078
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1078, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1079
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1079, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1080 (ignored write)  -- line 1081
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1081, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1082
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1082, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1083
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1083, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1084
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1084, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1085
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1085, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1086
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1086, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1087
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1087, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1088
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1088, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_124_GET_archives_x_6(_con)
  local _api = "GET /archives/2019102320375612675"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1089
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1089, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1090
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1090, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1091
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1091, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

-- line 1092 (ignored write)  -- line 1093
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1093, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1094
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1094, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1095
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1095, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1096
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1096, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1097
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1097, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1098
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1098, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1099
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1099, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_125_GET_api_content_sheets_x_comments_top_view_1(_con)
  local _api = "GET /api/content/sheets/3/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1100
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  	AND sheetcomme0_.parent_id = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1100, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_126_GET_api_admin_themes_activation_1(_con)
  local _api = "GET /api/admin/themes/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1101
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1101, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_127_GET_avatar_1(_con)
  local _api = "GET /avatar"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1102
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1102, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_128_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/2/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1103
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1103, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1104
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1104, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1105
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1105, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1106 (ignored write)  _commit_f(_con, true)
  
end

function API_129_POST_api_admin_tags_1(_con)
  local _api = "POST /api/admin/tags"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1107
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1107, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1108
  _sql = [[
  SELECT COUNT(tag0_.id) AS col_0_0_
  FROM tags tag0_
  WHERE tag0_.name = %s
  	OR tag0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "tags", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1108, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1109 (ignored write)  _commit_f(_con, true)
  
end

function API_130_GET_journals_page_x_1(_con)
  local _api = "GET /journals/page/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1110
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1110, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1111
  _sql = [[
  SELECT COUNT(journal0_.id) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1111, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1112
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1112, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1113
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1113, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1114
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1114, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1115
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1115, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_131_GET_api_admin_themes_viosey_material_configurations_1(_con)
  local _api = "GET /api/admin/themes/viosey_material/configurations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1116
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1116, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_132_PUT_api_admin_sheets_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/sheets/comments/4/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1117
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1117, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1118
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1118, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1119
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1119, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1120 (ignored write)  _commit_f(_con, true)
  
end

function API_133_GET_archives_xxxx_password_1(_con)
  local _api = "GET /archives/xxxx/password"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1121
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1121, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_134_GET_api_content_posts_x_comments_list_view_1(_con)
  local _api = "GET /api/content/posts/1/comments/list_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1122
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1122, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_135_GET_api_content_photos_latest_1(_con)
  local _api = "GET /api/content/photos/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1123
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  ORDER BY photo0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1123, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_136_GET_api_content_sheets_x_comments_top_view_1(_con)
  local _api = "GET /api/content/sheets/2/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1124
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  	AND sheetcomme0_.parent_id = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1124, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_136_GET_api_content_sheets_x_comments_top_view_2(_con)
  local _api = "GET /api/content/sheets/2/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1125
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  	AND sheetcomme0_.parent_id = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1125, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1126
  _sql = [[
  SELECT COUNT(sheetcomme0_.id) AS col_0_0_, sheetcomme0_.parent_id AS col_1_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.parent_id IN (%s)
  GROUP BY sheetcomme0_.parent_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1126, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_137_GET_journals_page_x_1(_con)
  local _api = "GET /journals/page/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1127
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1127, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1128
  _sql = [[
  SELECT COUNT(journal0_.id) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1128, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1129
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1129, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1130
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1130, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1131
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1131, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1132
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1132, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_138_POST_api_admin_themes_codelunatic_simple_activation_1(_con)
  local _api = "POST /api/admin/themes/codelunatic_simple/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1133
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1133, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1134
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1134, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1135 (ignored write)  -- line 1136
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1136, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1137
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1137, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1138
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1138, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_139_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/24/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1139
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1139, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1140
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1140, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1141
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1141, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1142 (ignored write)  _commit_f(_con, true)
  
end

function API_140_POST_api_admin_themes_viosey_material_settings_1(_con)
  local _api = "POST /api/admin/themes/viosey_material/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1143
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1143, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1144
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1144, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1145 (ignored write)  -- line 1146
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1146, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1147 (ignored write)  -- line 1148
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1148, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1149 (ignored write)  -- line 1150
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1150, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1151 (ignored write)  -- line 1152
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1152, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1153 (ignored write)  -- line 1154
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1154, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1155 (ignored write)  -- line 1156
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1156, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1157 (ignored write)  -- line 1158
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1158, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1159 (ignored write)  -- line 1160
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1160, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1161 (ignored write)  -- line 1162
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1162, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1163 (ignored write)  -- line 1164
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1164, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1165 (ignored write)  -- line 1166
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1166, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1167 (ignored write)  -- line 1168
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1168, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1169 (ignored write)  -- line 1170
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1170, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1171 (ignored write)  -- line 1172
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1172, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1173 (ignored write)  -- line 1174
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1174, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1175 (ignored write)  -- line 1176
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1176, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1177 (ignored write)  -- line 1178
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1178, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1179 (ignored write)  -- line 1180
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1180, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1181 (ignored write)  -- line 1182
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1182, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1183 (ignored write)  -- line 1184
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1184, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1185 (ignored write)  -- line 1186
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1186, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1187 (ignored write)  -- line 1188
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1188, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1189 (ignored write)  -- line 1190
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1190, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1191 (ignored write)  -- line 1192
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1192, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1193 (ignored write)  -- line 1194
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1194, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1195 (ignored write)  -- line 1196
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1196, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1197 (ignored write)  -- line 1198
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1198, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1199 (ignored write)  -- line 1200
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  	AND themesetti0_.setting_key = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "theme_settings", "setting_key", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1200, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1201 (ignored write)  -- line 1202
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1202, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_141_GET_api_content_posts_1(_con)
  local _api = "GET /api/content/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1203
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1203, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_142_DELETE_api_admin_journals_comments_x_1(_con)
  local _api = "DELETE /api/admin/journals/comments/7"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1204
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1204, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1205
  _sql = [[
  SELECT journalcom0_.id AS id2_2_0_, journalcom0_.create_time AS create_t3_2_0_, journalcom0_.deleted AS deleted4_2_0_, journalcom0_.update_time AS update_t5_2_0_, journalcom0_.author AS author6_2_0_
  	, journalcom0_.author_url AS author_u7_2_0_, journalcom0_.content AS content8_2_0_, journalcom0_.email AS email9_2_0_, journalcom0_.gravatar_md5 AS gravata10_2_0_, journalcom0_.ip_address AS ip_addr11_2_0_
  	, journalcom0_.is_admin AS is_admi12_2_0_, journalcom0_.parent_id AS parent_13_2_0_, journalcom0_.post_id AS post_id14_2_0_, journalcom0_.status AS status15_2_0_, journalcom0_.top_priority AS top_pri16_2_0_
  	, journalcom0_.user_agent AS user_ag17_2_0_
  FROM comments journalcom0_
  WHERE journalcom0_.id = %s
  	AND journalcom0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1205, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1206 (ignored write)  _commit_f(_con, true)
  
end

function API_143_GET_s_bs_1(_con)
  local _api = "GET /s/bs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1207
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1207, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1208
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1208, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1209
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1209, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1210
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1210, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_143_GET_s_bs_2(_con)
  local _api = "GET /s/bs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1211
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1211, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_143_GET_s_bs_3(_con)
  local _api = "GET /s/bs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1212
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1212, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1213
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1213, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1214
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1214, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1215
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1215, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1216 (ignored write)  _commit_f(_con, true)
  
end

function API_143_GET_s_bs_4(_con)
  local _api = "GET /s/bs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1217
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1217, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1218
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1218, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1219 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 1220
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1220, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1221
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1221, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_144_GET_page_x_1(_con)
  local _api = "GET /page/11"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1222
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1222, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1223
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1223, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1224
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1224, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1225
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1225, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1226
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1226, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1227
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1227, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_145_GET_page_x_1(_con)
  local _api = "GET /page/10"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1228
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1228, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1229
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1229, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1230
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1230, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1231
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1231, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1232
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1232, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1233
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1233, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_146_GET_page_x_1(_con)
  local _api = "GET /page/12"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1234
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT %s, 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1234, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1235
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1235, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1236
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1236, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1237
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1237, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1238
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1238, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1239
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1239, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_147_POST_api_admin_themes_fetching_1(_con)
  local _api = "POST /api/admin/themes/fetching"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1240
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1240, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1241
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1241, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1242
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1242, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1243
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1243, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1244
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1244, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1245
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1245, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_147_POST_api_admin_themes_fetching_2(_con)
  local _api = "POST /api/admin/themes/fetching"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1246
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1246, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_148_GET_api_admin_themes_caicai_anatole_configurations_1(_con)
  local _api = "GET /api/admin/themes/caicai_anatole/configurations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1247
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1247, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_149_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/2/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1248
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1248, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_150_GET_api_content_links_1(_con)
  local _api = "GET /api/content/links"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1249
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  ORDER BY link0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1249, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_151_DELETE_api_admin_photos_x_1(_con)
  local _api = "DELETE /api/admin/photos/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1250
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1250, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1251
  _sql = [[
  SELECT photo0_.id AS id1_9_0_, photo0_.create_time AS create_t2_9_0_, photo0_.deleted AS deleted3_9_0_, photo0_.update_time AS update_t4_9_0_, photo0_.description AS descript5_9_0_
  	, photo0_.location AS location6_9_0_, photo0_.name AS name7_9_0_, photo0_.take_time AS take_tim8_9_0_, photo0_.team AS team9_9_0_, photo0_.thumbnail AS thumbna10_9_0_
  	, photo0_.url AS url11_9_0_
  FROM photos photo0_
  WHERE photo0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1251, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1252 (ignored write)  _commit_f(_con, true)
  
end

function API_152_GET_api_admin_links_1(_con)
  local _api = "GET /api/admin/links"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1253
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1253, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1254
  _sql = [[
  SELECT link0_.id AS id1_4_, link0_.create_time AS create_t2_4_, link0_.deleted AS deleted3_4_, link0_.update_time AS update_t4_4_, link0_.description AS descript5_4_
  	, link0_.logo AS logo6_4_, link0_.name AS name7_4_, link0_.priority AS priority8_4_, link0_.team AS team9_4_, link0_.url AS url10_4_
  FROM links link0_
  ORDER BY link0_.priority ASC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1254, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_153_GET_api_admin_themes_fastbytex_keepit_files_content_1(_con)
  local _api = "GET /api/admin/themes/fastbyte01_keepit/files/content"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1255
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1255, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_154_GET_api_admin_themes_viosey_material_files_content_1(_con)
  local _api = "GET /api/admin/themes/viosey_material/files/content"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1256
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1256, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_155_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/23/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1257
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1257, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1258
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1258, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1259
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1259, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1260 (ignored write)  _commit_f(_con, true)
  
end

function API_156_POST_api_admin_themes_viosey_material_activation_1(_con)
  local _api = "POST /api/admin/themes/viosey_material/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1261
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1261, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1262
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1262, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1263 (ignored write)  -- line 1264
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1264, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1265
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1265, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1266
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1266, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_157_GET_api_admin_photos_teams_1(_con)
  local _api = "GET /api/admin/photos/teams"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1267
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1267, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1268
  _sql = [[
  SELECT DISTINCT photo0_.team AS col_0_0_
  FROM photos photo0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1268, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_158_PUT_api_admin_themes_upload_fastbytex_keepit_1(_con)
  local _api = "PUT /api/admin/themes/upload/fastbyte01_keepit"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1269
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1269, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_159_POST_api_content_sheets_comments_1(_con)
  local _api = "POST /api/content/sheets/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1270
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1270, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1271
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1271, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1272 (ignored write)  _commit_f(_con, false)
  
end

function API_160_PUT_api_admin_sheets_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/sheets/comments/9/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1273
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1273, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1274
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1274, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1275
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1275, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1276 (ignored write)  _commit_f(_con, true)
  
end

function API_161_GET_categories_x_1(_con)
  local _api = "GET /categories/111111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1277
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1277, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1278
  _sql = [[
  SELECT postcatego0_.post_id AS col_0_0_
  FROM post_categories postcatego0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND postcatego0_.category_id = %s
  	AND post1_.id = postcatego0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1278, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1279
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1279, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1280
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1280, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1281
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1281, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1282
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1282, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1283
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1283, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1284
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1284, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1285
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1285, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1286
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1286, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1287
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1287, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1288
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1288, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1289
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1289, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1290
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1290, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1291
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1291, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1292
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1292, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1293
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1293, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1294
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1294, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1295
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1295, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_162_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/13/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1296
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1296, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_163_GET_api_content_archives_months_1(_con)
  local _api = "GET /api/content/archives/months"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1297
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1297, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_164_GET_api_admin_journals_x_comments_tree_view_1(_con)
  local _api = "GET /api/admin/journals/1/comments/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1298
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1298, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1299
  _sql = [[
  SELECT journalcom0_.id AS id2_2_, journalcom0_.create_time AS create_t3_2_, journalcom0_.deleted AS deleted4_2_, journalcom0_.update_time AS update_t5_2_, journalcom0_.author AS author6_2_
  	, journalcom0_.author_url AS author_u7_2_, journalcom0_.content AS content8_2_, journalcom0_.email AS email9_2_, journalcom0_.gravatar_md5 AS gravata10_2_, journalcom0_.ip_address AS ip_addr11_2_
  	, journalcom0_.is_admin AS is_admi12_2_, journalcom0_.parent_id AS parent_13_2_, journalcom0_.post_id AS post_id14_2_, journalcom0_.status AS status15_2_, journalcom0_.top_priority AS top_pri16_2_
  	, journalcom0_.user_agent AS user_ag17_2_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id = %s
  	AND journalcom0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1299, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_165_GET_api_admin_photos_1(_con)
  local _api = "GET /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1300
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1300, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1301
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  WHERE 1 = 1
  ORDER BY photo0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1301, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_165_GET_api_admin_photos_2(_con)
  local _api = "GET /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1302
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1302, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1303
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  WHERE photo0_.team = %s
  ORDER BY photo0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "team", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1303, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_165_GET_api_admin_photos_3(_con)
  local _api = "GET /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1304
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1304, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1305
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  WHERE photo0_.team = %s
  	AND (photo0_.name LIKE %s
  		OR photo0_.description LIKE %s
  		OR photo0_.location LIKE %s)
  ORDER BY photo0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "team", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "photos", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "photos", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "photos", "location", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1305, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_165_GET_api_admin_photos_4(_con)
  local _api = "GET /api/admin/photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1306
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1306, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1307
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  WHERE photo0_.name LIKE %s
  	OR photo0_.description LIKE %s
  	OR photo0_.location LIKE %s
  ORDER BY photo0_.update_time DESC
  LIMIT 18
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "photos", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "photos", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "photos", "location", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1307, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_166_POST_api_admin_themes_upload_1(_con)
  local _api = "POST /api/admin/themes/upload"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1308
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1308, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_167_GET_api_admin_sheets_comments_1(_con)
  local _api = "GET /api/admin/sheets/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1309
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1309, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1310
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND 1 = 1
  ORDER BY sheetcomme0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1310, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1311
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1311, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_167_GET_api_admin_sheets_comments_2(_con)
  local _api = "GET /api/admin/sheets/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1312
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1312, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1313
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND 1 = 1
  ORDER BY sheetcomme0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1313, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_167_GET_api_admin_sheets_comments_3(_con)
  local _api = "GET /api/admin/sheets/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1314
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1314, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1315
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.status = %s
  ORDER BY sheetcomme0_.update_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1315, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_168_GET_api_admin_themes_caicai_anatole_settings_1(_con)
  local _api = "GET /api/admin/themes/caicai_anatole/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1316
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1316, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1317
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1317, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_169_POST_api_content_posts_comments_1(_con)
  local _api = "POST /api/content/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1318
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1318, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1319
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1319, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1320 (ignored write)  _commit_f(_con, false)
  
end

function API_169_POST_api_content_posts_comments_2(_con)
  local _api = "POST /api/content/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1321
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1321, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_169_POST_api_content_posts_comments_3(_con)
  local _api = "POST /api/content/posts/comments"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1322
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1322, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1323
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1323, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1324
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1324, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1325 (ignored write)  _commit_f(_con, false)
  
end

function API_170_POST_archives_xxxx_password_1(_con)
  local _api = "POST /archives/xxxx/password"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1326
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1326, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_171_GET_api_admin_sheets_x_1(_con)
  local _api = "GET /api/admin/sheets/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1327
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1327, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1328
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1328, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_172_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/20/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1329
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1329, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1330
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1330, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1331
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1331, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1332 (ignored write)  _commit_f(_con, true)
  
end

function API_173_PUT_api_admin_users_profiles_password_1(_con)
  local _api = "PUT /api/admin/users/profiles/password"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1333
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1333, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1334
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1334, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_173_PUT_api_admin_users_profiles_password_2(_con)
  local _api = "PUT /api/admin/users/profiles/password"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1335
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1335, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1336
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1336, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1337
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1337, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1338 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 1339
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1339, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1340 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1341 (ignored write)  _commit_f(_con, false)
  
end

function API_174_GET_api_admin_links_x_1(_con)
  local _api = "GET /api/admin/links/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1342
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1342, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1343
  _sql = [[
  SELECT link0_.id AS id1_4_0_, link0_.create_time AS create_t2_4_0_, link0_.deleted AS deleted3_4_0_, link0_.update_time AS update_t4_4_0_, link0_.description AS descript5_4_0_
  	, link0_.logo AS logo6_4_0_, link0_.name AS name7_4_0_, link0_.priority AS priority8_4_0_, link0_.team AS team9_4_0_, link0_.url AS url10_4_0_
  FROM links link0_
  WHERE link0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "links", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1343, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_175_GET_api_admin_sheets_x_1(_con)
  local _api = "GET /api/admin/sheets/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1344
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1344, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1345
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1345, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_176_GET_api_admin_themes_codelunatic_simple_configurations_1(_con)
  local _api = "GET /api/admin/themes/codelunatic_simple/configurations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1346
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1346, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_177_GET_api_content_categories_x_posts_1(_con)
  local _api = "GET /api/content/categories/1/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1347
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1347, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_178_PUT_api_admin_posts_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/1/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1348
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1348, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1349
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1349, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1350
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1350, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1351
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1351, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1352 (ignored write)  _commit_f(_con, true)
  
end

function API_179_GET_api_content_sheets_x_comments_tree_view_1(_con)
  local _api = "GET /api/content/sheets/2/comments/tree_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1353
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1353, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_180_DELETE_api_admin_posts_x_1(_con)
  local _api = "DELETE /api/admin/posts/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1354
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1354, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1355
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1355, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1356
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1356, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1357
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1357, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1358 (ignored write)  _commit_f(_con, true)
  
-- line 1359 (ignored write)
-- line 1360 (ignored write)
end

function API_181_POST_api_admin_password_code_1(_con)
  local _api = "POST /api/admin/password/code"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1361
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1361, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_182_PUT_api_admin_posts_comments_x_status_PUBLISHED_1(_con)
  local _api = "PUT /api/admin/posts/comments/19/status/PUBLISHED"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1362
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1362, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1363
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1363, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1364
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1364, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1365 (ignored write)  _commit_f(_con, true)
  
end

function API_183_GET_api_admin_themes_activation_files_1(_con)
  local _api = "GET /api/admin/themes/activation/files"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1366
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1366, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_184_GET_api_content_archives_years_1(_con)
  local _api = "GET /api/content/archives/years"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1367
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1367, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_185_GET_api_admin_posts_x_1(_con)
  local _api = "GET /api/admin/posts/14"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1368
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1368, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1369
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1369, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1370
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1370, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1371
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1371, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_185_GET_api_admin_posts_x_2(_con)
  local _api = "GET /api/admin/posts/14"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1372
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1372, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1373
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1373, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1374
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1374, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1375
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1375, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1376
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1376, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_186_GET_api_content_users_profile_1(_con)
  local _api = "GET /api/content/users/profile"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1377
  _sql = [[
  SELECT user0_.id AS id1_15_, user0_.create_time AS create_t2_15_, user0_.deleted AS deleted3_15_, user0_.update_time AS update_t4_15_, user0_.avatar AS avatar5_15_
  	, user0_.description AS descript6_15_, user0_.email AS email7_15_, user0_.expire_time AS expire_t8_15_, user0_.nickname AS nickname9_15_, user0_.password AS passwor10_15_
  	, user0_.username AS usernam11_15_
  FROM users user0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1377, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_187_GET_api_admin_tags_1(_con)
  local _api = "GET /api/admin/tags"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1378
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1378, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1379
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1379, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1380
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1380, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_188_GET_api_admin_users_profiles_1(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1381
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1381, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_188_GET_api_admin_users_profiles_2(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

-- line 1382 (ignored write)
end

function API_188_GET_api_admin_users_profiles_3(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1383
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1383, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 1384 (ignored write)
end

function API_188_GET_api_admin_users_profiles_4(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

-- line 1385 (ignored write)  -- line 1386
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1386, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_188_GET_api_admin_users_profiles_5(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1387
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1387, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1388 (ignored write)  _commit_f(_con, true)
  
end

function API_188_GET_api_admin_users_profiles_6(_con)
  local _api = "GET /api/admin/users/profiles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1389
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1389, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 1390 (ignored write)  -- line 1391
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1391, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_189_GET_api_admin_sheets_1(_con)
  local _api = "GET /api/admin/sheets"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1392
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1392, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1393
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ORDER BY sheet0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1393, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_189_GET_api_admin_sheets_2(_con)
  local _api = "GET /api/admin/sheets"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1394
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1394, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1395
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  ORDER BY sheet0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1395, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1396
  _sql = [[
  SELECT COUNT(sheetcomme0_.id) AS col_0_0_, sheetcomme0_.post_id AS col_1_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id IN (%s)
  GROUP BY sheetcomme0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1396, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_190_GET_api_admin_sheets_comments_latest_1(_con)
  local _api = "GET /api/admin/sheets/comments/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1397
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1397, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1398
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.status = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1398, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_190_GET_api_admin_sheets_comments_latest_2(_con)
  local _api = "GET /api/admin/sheets/comments/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1399
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1399, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1400
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.status = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1400, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1401
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1401, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_191_GET_api_content_sheets_x_comments_list_view_1(_con)
  local _api = "GET /api/content/sheets/2/comments/list_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1402
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ORDER BY sheetcomme0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1402, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1403
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.id IN (%s)
  ORDER BY sheetcomme0_.create_time DESC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1403, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_192_GET_api_content_tags_x_posts_1(_con)
  local _api = "GET /api/content/tags/111/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1404
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1404, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_192_GET_api_content_tags_x_posts_2(_con)
  local _api = "GET /api/content/tags/111/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1405
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.slug_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "slug_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1405, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1406
  _sql = [[
  SELECT posttag0_.post_id AS col_0_0_
  FROM post_tags posttag0_
  	CROSS JOIN posts post1_
  WHERE post1_.type = %s
  	AND posttag0_.tag_id = %s
  	AND post1_.id = posttag0_.post_id
  	AND post1_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_tags", "tag_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1406, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_193_GET_photos_1(_con)
  local _api = "GET /photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1407
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1407, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_193_GET_photos_2(_con)
  local _api = "GET /photos"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1408
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1408, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1409
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1409, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1410
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1410, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1411
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1411, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1412
  _sql = [[
  SELECT photo0_.id AS id1_9_, photo0_.create_time AS create_t2_9_, photo0_.deleted AS deleted3_9_, photo0_.update_time AS update_t4_9_, photo0_.description AS descript5_9_
  	, photo0_.location AS location6_9_, photo0_.name AS name7_9_, photo0_.take_time AS take_tim8_9_, photo0_.team AS team9_9_, photo0_.thumbnail AS thumbna10_9_
  	, photo0_.url AS url11_9_
  FROM photos photo0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1412, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_194_GET_sitemap_xml_1(_con)
  local _api = "GET /sitemap.xml"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1413
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.create_time DESC
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1413, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1414
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1414, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1415
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1415, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1416
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1416, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1417
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1417, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1418
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1418, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_195_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/10/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1419
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1419, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_196_GET_archives_x_1(_con)
  local _api = "GET /archives/2019102320563441998"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1420
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1420, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1421
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1421, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1422 (ignored write)  _commit_f(_con, true)
  
  -- line 1423
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1423, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1424
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1424, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1425
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1425, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1426
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1426, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1427
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1427, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1428
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1428, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1429
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1429, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1430
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1430, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1431
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1431, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1432
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1432, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1433
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1433, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1434
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1434, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_197_GET_api_admin_posts_latest_1(_con)
  local _api = "GET /api/admin/posts/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1435
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1435, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1436
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  ORDER BY post0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1436, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_197_GET_api_admin_posts_latest_2(_con)
  local _api = "GET /api/admin/posts/latest"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1437
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1437, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1438
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  ORDER BY post0_.create_time DESC
  LIMIT 5
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1438, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1439
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1439, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_198_GET_api_admin_posts_1(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1440
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1440, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1441
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1441, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1442
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1442, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1443
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1443, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1444
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1444, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_2(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1445
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1445, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1446
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1446, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1447
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1447, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1448
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1448, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1449
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1449, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1450
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1450, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_3(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1451
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1451, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1452
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1452, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_198_GET_api_admin_posts_4(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1453
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1453, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1454
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1454, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1455
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1455, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1456
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1456, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1457
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1457, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1458
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1458, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_5(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1459
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1459, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1460
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1460, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1461
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1461, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1462
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1462, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1463
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1463, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_6(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1464
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1464, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1465
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND EXISTS (
  		SELECT postcatego1_.post_id
  		FROM post_categories postcatego1_
  		WHERE post0_.id = postcatego1_.post_id
  			AND postcatego1_.category_id = %s
  	)
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "post_categories", "category_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1465, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_198_GET_api_admin_posts_7(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1466
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1466, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1467
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1467, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1468
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1468, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1469
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1469, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1470
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1470, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1471
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1471, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_8(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1472
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1472, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1473
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1473, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1474
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1474, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1475
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1475, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1476
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1476, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1477
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1477, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1478
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1478, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_198_GET_api_admin_posts_9(_con)
  local _api = "GET /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1479
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1479, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1480
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1480, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1481
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND 1 = 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1481, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1482
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1482, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1483
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1483, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1484
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1484, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1485
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1485, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1486
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1486, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_199_POST_api_admin_posts_1(_con)
  local _api = "POST /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1487
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1487, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1488
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1488, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1489 (ignored write)  -- line 1490
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1490, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1491
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1491, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1492
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1492, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1493
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1493, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1494 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1495 (ignored write)  _commit_f(_con, false)
  
end

function API_199_POST_api_admin_posts_2(_con)
  local _api = "POST /api/admin/posts"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1496
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1496, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1497
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1497, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1498 (ignored write)  -- line 1499
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1499, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1500
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1500, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
-- line 1501 (ignored write)
end

function API_200_GET_api_admin_sheets_preview_x_1(_con)
  local _api = "GET /api/admin/sheets/preview/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1502
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1502, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1503
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1503, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_201_GET_api_content_posts_x_comments_x_children_1(_con)
  local _api = "GET /api/content/posts/14/comments/8/children"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1504
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1504, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1505
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1505, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1506
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1506, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1507
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1507, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1508
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1508, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1509
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1509, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1510
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1510, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1511
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1511, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1512
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1512, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1513
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1513, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1514
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1514, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_202_POST_api_content_posts_search_1(_con)
  local _api = "POST /api/content/posts/search"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1515
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1515, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_203_GET_api_content_categories_1(_con)
  local _api = "GET /api/content/categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1516
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1516, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_203_GET_api_content_categories_2(_con)
  local _api = "GET /api/content/categories"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1517
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.update_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1517, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1518
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1518, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_204_GET_api_admin_themes_SumiMakito_Journal_settings_1(_con)
  local _api = "GET /api/admin/themes/SumiMakito_Journal/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1519
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1519, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1520
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1520, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_205_GET_search_1(_con)
  local _api = "GET /search"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1521
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1521, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1522
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1522, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1523
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1523, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1524
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1524, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1525
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1525, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1526
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1526, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1527
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1527, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1528
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1528, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1529
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1529, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1530
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1530, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1531
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1531, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_205_GET_search_2(_con)
  local _api = "GET /search"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1532
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1532, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1533
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND (post0_.title LIKE %s
  		OR post0_.original_content LIKE %s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "title", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "original_content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1533, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1534
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1534, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1535
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1535, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1536
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1536, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1537
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1537, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1538
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1538, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1539
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1539, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1540
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1540, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1541
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1541, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1542
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1542, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1543
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1543, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1544
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1544, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1545
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1545, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1546
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1546, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1547
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1547, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1548
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1548, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_206_GET_archives_xxxx_1(_con)
  local _api = "GET /archives/xxxx"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1549
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1549, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1550
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1550, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1551
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1551, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1552
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1552, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1553
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1553, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1554
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1554, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1555
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1555, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1556
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1556, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1557
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1557, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1558
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1558, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1559
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1559, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_206_GET_archives_xxxx_2(_con)
  local _api = "GET /archives/xxxx"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1560
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1560, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_206_GET_archives_xxxx_3(_con)
  local _api = "GET /archives/xxxx"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1561
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1561, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1562
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1562, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1563
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1563, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1564
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1564, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1565
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1565, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1566
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1566, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1567
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1567, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1568
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1568, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1569
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1569, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1570
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1570, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1571
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1571, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1572
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1572, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1573
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1573, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1574
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1574, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_207_GET_api_admin_themes_SumiMakito_Journal_files_1(_con)
  local _api = "GET /api/admin/themes/SumiMakito_Journal/files"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1575
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1575, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_208_POST_api_admin_backups_import_markdown_1(_con)
  local _api = "POST /api/admin/backups/import/markdown"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1576
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1576, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1577
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1577, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1578 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1579
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1579, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1580
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1580, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1581 (ignored write)  _commit_f(_con, false)
  
end

function API_209_GET_s_x_1(_con)
  local _api = "GET /s/111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1582
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1582, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1583
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1583, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1584
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1584, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 1585 (ignored write)
end

function API_209_GET_s_x_2(_con)
  local _api = "GET /s/111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1586
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1586, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1587
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1587, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1588 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

  -- line 1589
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1589, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_209_GET_s_x_3(_con)
  local _api = "GET /s/111"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1590
  _sql = [[
  SELECT sheet0_.id AS id2_12_, sheet0_.create_time AS create_t3_12_, sheet0_.deleted AS deleted4_12_, sheet0_.update_time AS update_t5_12_, sheet0_.create_from AS create_f6_12_
  	, sheet0_.disallow_comment AS disallow7_12_, sheet0_.edit_time AS edit_tim8_12_, sheet0_.format_content AS format_c9_12_, sheet0_.likes AS likes10_12_, sheet0_.original_content AS origina11_12_
  	, sheet0_.password AS passwor12_12_, sheet0_.status AS status13_12_, sheet0_.summary AS summary14_12_, sheet0_.template AS templat15_12_, sheet0_.thumbnail AS thumbna16_12_
  	, sheet0_.title AS title17_12_, sheet0_.top_priority AS top_pri18_12_, sheet0_.url AS url19_12_, sheet0_.visits AS visits20_12_
  FROM posts sheet0_
  WHERE sheet0_.type = %s
  	AND sheet0_.url = %s
  	AND sheet0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1590, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1591
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_, sheetcomme0_.create_time AS create_t3_2_, sheetcomme0_.deleted AS deleted4_2_, sheetcomme0_.update_time AS update_t5_2_, sheetcomme0_.author AS author6_2_
  	, sheetcomme0_.author_url AS author_u7_2_, sheetcomme0_.content AS content8_2_, sheetcomme0_.email AS email9_2_, sheetcomme0_.gravatar_md5 AS gravata10_2_, sheetcomme0_.ip_address AS ip_addr11_2_
  	, sheetcomme0_.is_admin AS is_admi12_2_, sheetcomme0_.parent_id AS parent_13_2_, sheetcomme0_.post_id AS post_id14_2_, sheetcomme0_.status AS status15_2_, sheetcomme0_.top_priority AS top_pri16_2_
  	, sheetcomme0_.user_agent AS user_ag17_2_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.type = %s
  	AND sheetcomme0_.post_id = %s
  	AND sheetcomme0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1591, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1592 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1593
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1593, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__1(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1594
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1594, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1595
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1595, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__2(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1596
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1596, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1597
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1597, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__3(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1598
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1598, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1599
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1599, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1600
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1600, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__4(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1601
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1601, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1602
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1602, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1603
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1603, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1604
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1604, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1605
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1605, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1606
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1606, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__5(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1607
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1607, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1608
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1608, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1609
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1609, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1610
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1610, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1611
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1611, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1612
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1612, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__6(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1613
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1613, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1614
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1614, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1615
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1615, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1616
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1616, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1617
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1617, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1618
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1618, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1619
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1619, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__7(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1620
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1620, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1621
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1621, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1622
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1622, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1623
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1623, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1624
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1624, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1625
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1625, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1626
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1626, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__8(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1627
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1627, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1628
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1628, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1629
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1629, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1630
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1630, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1631
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1631, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1632
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1632, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1633
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1633, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1634
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1634, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1635
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1635, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1636
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1636, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1637
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1637, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1638
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1638, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__9(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1639
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1639, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1640
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1640, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1641
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1641, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1642
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  WHERE tag0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "tags", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1642, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1643
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1643, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1644
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  WHERE category0_.id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "categories", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1644, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1645
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1645, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1646
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1646, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1647
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1647, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1648
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1648, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1649
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1649, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1650
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1650, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1651
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM categories category0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1651, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1652
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM tags tag0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1652, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1653
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1653, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1654
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1654, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1655
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1655, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__10(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1656
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1656, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1657
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1657, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1658
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1658, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1659
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1659, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1660
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1660, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_210_GET__11(_con)
  local _api = "GET /"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1661
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  ORDER BY post0_.top_priority DESC, post0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1661, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1662
  _sql = [[
  SELECT posttag0_.id AS id1_11_, posttag0_.create_time AS create_t2_11_, posttag0_.deleted AS deleted3_11_, posttag0_.update_time AS update_t4_11_, posttag0_.post_id AS post_id5_11_
  	, posttag0_.tag_id AS tag_id6_11_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1662, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1663
  _sql = [[
  SELECT postcatego0_.id AS id1_10_, postcatego0_.create_time AS create_t2_10_, postcatego0_.deleted AS deleted3_10_, postcatego0_.update_time AS update_t4_10_, postcatego0_.category_id AS category5_10_
  	, postcatego0_.post_id AS post_id6_10_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id IN (%s)
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1663, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1664
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.post_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id IN (%s)
  GROUP BY postcommen0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1664, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1665
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1665, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1666
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1666, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_211_PUT_api_admin_posts_x_status_RECYCLE_1(_con)
  local _api = "PUT /api/admin/posts/1/status/RECYCLE"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1667
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1667, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1668
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1668, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1669
  _sql = [[
  SELECT post0_.id AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.id <> %s
  	AND post0_.url = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1669, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1670
  _sql = [[
  SELECT post0_.id AS id2_12_0_, post0_.create_time AS create_t3_12_0_, post0_.deleted AS deleted4_12_0_, post0_.update_time AS update_t5_12_0_, post0_.create_from AS create_f6_12_0_
  	, post0_.disallow_comment AS disallow7_12_0_, post0_.edit_time AS edit_tim8_12_0_, post0_.format_content AS format_c9_12_0_, post0_.likes AS likes10_12_0_, post0_.original_content AS origina11_12_0_
  	, post0_.password AS passwor12_12_0_, post0_.status AS status13_12_0_, post0_.summary AS summary14_12_0_, post0_.template AS templat15_12_0_, post0_.thumbnail AS thumbna16_12_0_
  	, post0_.title AS title17_12_0_, post0_.top_priority AS top_pri18_12_0_, post0_.url AS url19_12_0_, post0_.visits AS visits20_12_0_
  FROM posts post0_
  WHERE post0_.id = %s
  	AND post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1670, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1671 (ignored write)  _commit_f(_con, true)
  
end

function API_212_DELETE_api_admin_journals_comments_x_1(_con)
  local _api = "DELETE /api/admin/journals/comments/6"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1672
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1672, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1673
  _sql = [[
  SELECT journalcom0_.id AS id2_2_0_, journalcom0_.create_time AS create_t3_2_0_, journalcom0_.deleted AS deleted4_2_0_, journalcom0_.update_time AS update_t5_2_0_, journalcom0_.author AS author6_2_0_
  	, journalcom0_.author_url AS author_u7_2_0_, journalcom0_.content AS content8_2_0_, journalcom0_.email AS email9_2_0_, journalcom0_.gravatar_md5 AS gravata10_2_0_, journalcom0_.ip_address AS ip_addr11_2_0_
  	, journalcom0_.is_admin AS is_admi12_2_0_, journalcom0_.parent_id AS parent_13_2_0_, journalcom0_.post_id AS post_id14_2_0_, journalcom0_.status AS status15_2_0_, journalcom0_.top_priority AS top_pri16_2_0_
  	, journalcom0_.user_agent AS user_ag17_2_0_
  FROM comments journalcom0_
  WHERE journalcom0_.id = %s
  	AND journalcom0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1673, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1674 (ignored write)  _commit_f(_con, true)
  
end

function API_213_GET_journals_1(_con)
  local _api = "GET /journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1675
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1675, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1676
  _sql = [[
  SELECT COUNT(journal0_.id) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1676, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_213_GET_journals_2(_con)
  local _api = "GET /journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1677
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1677, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1678
  _sql = [[
  SELECT COUNT(journal0_.id) AS col_0_0_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1678, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1679
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1679, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1680
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1680, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1681
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1681, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1682
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1682, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_213_GET_journals_3(_con)
  local _api = "GET /journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1683
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1683, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_213_GET_journals_4(_con)
  local _api = "GET /journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1684
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1684, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1685
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1685, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1686
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1686, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_214_POST_api_admin_themes_fastbytex_keepit_activation_1(_con)
  local _api = "POST /api/admin/themes/fastbyte01_keepit/activation"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1687
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1687, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1688
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1688, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1689 (ignored write)  -- line 1690
  _sql = [[
  SELECT option0_.id AS id1_8_, option0_.create_time AS create_t2_8_, option0_.deleted AS deleted3_8_, option0_.update_time AS update_t4_8_, option0_.option_key AS option_k5_8_
  	, option0_.option_value AS option_v6_8_
  FROM options option0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1690, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1691
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1691, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1692
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1692, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_215_DELETE_api_admin_sheets_x_1(_con)
  local _api = "DELETE /api/admin/sheets/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1693
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1693, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1694
  _sql = [[
  SELECT sheet0_.id AS id2_12_0_, sheet0_.create_time AS create_t3_12_0_, sheet0_.deleted AS deleted4_12_0_, sheet0_.update_time AS update_t5_12_0_, sheet0_.create_from AS create_f6_12_0_
  	, sheet0_.disallow_comment AS disallow7_12_0_, sheet0_.edit_time AS edit_tim8_12_0_, sheet0_.format_content AS format_c9_12_0_, sheet0_.likes AS likes10_12_0_, sheet0_.original_content AS origina11_12_0_
  	, sheet0_.password AS passwor12_12_0_, sheet0_.status AS status13_12_0_, sheet0_.summary AS summary14_12_0_, sheet0_.template AS templat15_12_0_, sheet0_.thumbnail AS thumbna16_12_0_
  	, sheet0_.title AS title17_12_0_, sheet0_.top_priority AS top_pri18_12_0_, sheet0_.url AS url19_12_0_, sheet0_.visits AS visits20_12_0_
  FROM posts sheet0_
  WHERE sheet0_.id = %s
  	AND sheet0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1694, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1695 (ignored write)  _commit_f(_con, true)
  
-- line 1696 (ignored write)
end

function API_216_GET_api_admin_journals_1(_con)
  local _api = "GET /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1697
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1697, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1698
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE 1 = 1
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1698, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_216_GET_api_admin_journals_2(_con)
  local _api = "GET /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1699
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1699, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1700
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE 1 = 1
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1700, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1701
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.post_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id IN (%s)
  GROUP BY journalcom0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1701, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_216_GET_api_admin_journals_3(_con)
  local _api = "GET /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1702
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1702, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1703
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.content LIKE %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1703, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1704
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.post_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id IN (%s)
  GROUP BY journalcom0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1704, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_216_GET_api_admin_journals_4(_con)
  local _api = "GET /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1705
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1705, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1706
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  	AND journal0_.content LIKE %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "journals", "content", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1706, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1707
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.post_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id IN (%s)
  GROUP BY journalcom0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1707, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_216_GET_api_admin_journals_5(_con)
  local _api = "GET /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1708
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1708, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1709
  _sql = [[
  SELECT journal0_.id AS id1_3_, journal0_.create_time AS create_t2_3_, journal0_.deleted AS deleted3_3_, journal0_.update_time AS update_t4_3_, journal0_.content AS content5_3_
  	, journal0_.likes AS likes6_3_, journal0_.type AS type7_3_
  FROM journals journal0_
  WHERE journal0_.type = %s
  ORDER BY journal0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "journals", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1709, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1710
  _sql = [[
  SELECT COUNT(journalcom0_.id) AS col_0_0_, journalcom0_.post_id AS col_1_0_
  FROM comments journalcom0_
  WHERE journalcom0_.type = %s
  	AND journalcom0_.post_id IN (%s)
  GROUP BY journalcom0_.post_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1710, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_217_GET_api_content_posts_x_comments_top_view_1(_con)
  local _api = "GET /api/content/posts/14/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1711
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1711, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_217_GET_api_content_posts_x_comments_top_view_2(_con)
  local _api = "GET /api/content/posts/14/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1712
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1712, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1713
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.parent_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.parent_id IN (%s)
  GROUP BY postcommen0_.parent_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1713, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_217_GET_api_content_posts_x_comments_top_view_3(_con)
  local _api = "GET /api/content/posts/14/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1714
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1714, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1715
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1715, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1716
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.parent_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.parent_id IN (%s)
  GROUP BY postcommen0_.parent_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1716, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_217_GET_api_content_posts_x_comments_top_view_4(_con)
  local _api = "GET /api/content/posts/14/comments/top_view"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1717
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ORDER BY postcommen0_.create_time DESC
  LIMIT %s, 2
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1717, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1718
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  	AND postcommen0_.parent_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1718, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1719
  _sql = [[
  SELECT COUNT(postcommen0_.id) AS col_0_0_, postcommen0_.parent_id AS col_1_0_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.parent_id IN (%s)
  GROUP BY postcommen0_.parent_id
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "parent_id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1719, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_218_PUT_api_admin_attachments_x_1(_con)
  local _api = "PUT /api/admin/attachments/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1720
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1720, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1721
  _sql = [[
  SELECT attachment0_.id AS id1_0_0_, attachment0_.create_time AS create_t2_0_0_, attachment0_.deleted AS deleted3_0_0_, attachment0_.update_time AS update_t4_0_0_, attachment0_.file_key AS file_key5_0_0_
  	, attachment0_.height AS height6_0_0_, attachment0_.media_type AS media_ty7_0_0_, attachment0_.name AS name8_0_0_, attachment0_.path AS path9_0_0_, attachment0_.size AS size10_0_0_
  	, attachment0_.suffix AS suffix11_0_0_, attachment0_.thumb_path AS thumb_p12_0_0_, attachment0_.type AS type13_0_0_, attachment0_.width AS width14_0_0_
  FROM attachments attachment0_
  WHERE attachment0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1721, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1722
  _sql = [[
  SELECT attachment0_.id AS id1_0_0_, attachment0_.create_time AS create_t2_0_0_, attachment0_.deleted AS deleted3_0_0_, attachment0_.update_time AS update_t4_0_0_, attachment0_.file_key AS file_key5_0_0_
  	, attachment0_.height AS height6_0_0_, attachment0_.media_type AS media_ty7_0_0_, attachment0_.name AS name8_0_0_, attachment0_.path AS path9_0_0_, attachment0_.size AS size10_0_0_
  	, attachment0_.suffix AS suffix11_0_0_, attachment0_.thumb_path AS thumb_p12_0_0_, attachment0_.type AS type13_0_0_, attachment0_.width AS width14_0_0_
  FROM attachments attachment0_
  WHERE attachment0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "attachments", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1722, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1723 (ignored write)  _commit_f(_con, true)
  
end

function API_219_POST_api_admin_journals_1(_con)
  local _api = "POST /api/admin/journals"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1724
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1724, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1725 (ignored write)  _commit_f(_con, false)
  
end

function API_220_GET_archives_x_1(_con)
  local _api = "GET /archives/2019102320562868698"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1726
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1726, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1727
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1727, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1728 (ignored write)  _commit_f(_con, true)
  
  -- line 1729
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1729, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1730
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1730, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1731
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1731, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1732
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1732, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1733
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1733, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1734
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1734, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1735
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1735, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1736
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1736, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1737
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1737, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1738
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1738, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1739
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1739, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1740
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1740, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_220_GET_archives_x_2(_con)
  local _api = "GET /archives/2019102320562868698"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1741
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.url = %s
  	AND post0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "url", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1741, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1742
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ORDER BY post0_.create_time DESC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1742, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1743
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time < %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1743, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1744
  _sql = [[
  SELECT post0_.id AS id2_12_, post0_.create_time AS create_t3_12_, post0_.deleted AS deleted4_12_, post0_.update_time AS update_t5_12_, post0_.create_from AS create_f6_12_
  	, post0_.disallow_comment AS disallow7_12_, post0_.edit_time AS edit_tim8_12_, post0_.format_content AS format_c9_12_, post0_.likes AS likes10_12_, post0_.original_content AS origina11_12_
  	, post0_.password AS passwor12_12_, post0_.status AS status13_12_, post0_.summary AS summary14_12_, post0_.template AS templat15_12_, post0_.thumbnail AS thumbna16_12_
  	, post0_.title AS title17_12_, post0_.top_priority AS top_pri18_12_, post0_.url AS url19_12_, post0_.visits AS visits20_12_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ORDER BY post0_.create_time ASC
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1744, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1745
  _sql = [[
  SELECT COUNT(post0_.id) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  	AND post0_.status = %s
  	AND post0_.create_time > %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "status", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "posts", "create_time", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1745, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1746 (ignored write)  _commit_f(_con, true)
  
  -- line 1747
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1747, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1748
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1748, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1749
  _sql = [[
  SELECT postcommen0_.id AS id2_2_, postcommen0_.create_time AS create_t3_2_, postcommen0_.deleted AS deleted4_2_, postcommen0_.update_time AS update_t5_2_, postcommen0_.author AS author6_2_
  	, postcommen0_.author_url AS author_u7_2_, postcommen0_.content AS content8_2_, postcommen0_.email AS email9_2_, postcommen0_.gravatar_md5 AS gravata10_2_, postcommen0_.ip_address AS ip_addr11_2_
  	, postcommen0_.is_admin AS is_admi12_2_, postcommen0_.parent_id AS parent_13_2_, postcommen0_.post_id AS post_id14_2_, postcommen0_.status AS status15_2_, postcommen0_.top_priority AS top_pri16_2_
  	, postcommen0_.user_agent AS user_ag17_2_
  FROM comments postcommen0_
  WHERE postcommen0_.type = %s
  	AND postcommen0_.post_id = %s
  	AND postcommen0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "post_id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1749, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1750
  _sql = [[
  SELECT posttag0_.tag_id AS col_0_0_
  FROM post_tags posttag0_
  WHERE posttag0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_tags", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1750, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1751
  _sql = [[
  SELECT postcatego0_.category_id AS col_0_0_
  FROM post_categories postcatego0_
  WHERE postcatego0_.post_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "post_categories", "post_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1751, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1752
  _sql = [[
  SELECT menu0_.id AS id1_6_, menu0_.create_time AS create_t2_6_, menu0_.deleted AS deleted3_6_, menu0_.update_time AS update_t4_6_, menu0_.icon AS icon5_6_
  	, menu0_.name AS name6_6_, menu0_.parent_id AS parent_i7_6_, menu0_.priority AS priority8_6_, menu0_.target AS target9_6_, menu0_.team AS team10_6_
  	, menu0_.url AS url11_6_
  FROM menus menu0_
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1752, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1753
  _sql = [[
  SELECT category0_.id AS id1_1_, category0_.create_time AS create_t2_1_, category0_.deleted AS deleted3_1_, category0_.update_time AS update_t4_1_, category0_.description AS descript5_1_
  	, category0_.name AS name6_1_, category0_.parent_id AS parent_i7_1_, category0_.slug_name AS slug_nam8_1_
  FROM categories category0_
  ORDER BY category0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1753, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1754
  _sql = [[
  SELECT COUNT(postcatego0_.post_id) AS col_0_0_, postcatego0_.category_id AS col_1_0_
  FROM post_categories postcatego0_
  GROUP BY postcatego0_.category_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1754, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1755
  _sql = [[
  SELECT COUNT(*) AS col_0_0_
  FROM posts post0_
  WHERE post0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "posts", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1755, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1756
  _sql = [[
  SELECT tag0_.id AS id1_13_, tag0_.create_time AS create_t2_13_, tag0_.deleted AS deleted3_13_, tag0_.update_time AS update_t4_13_, tag0_.name AS name5_13_
  	, tag0_.slug_name AS slug_nam6_13_
  FROM tags tag0_
  ORDER BY tag0_.create_time DESC
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1756, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1757
  _sql = [[
  SELECT COUNT(posttag0_.post_id) AS col_0_0_, posttag0_.tag_id AS col_1_0_
  FROM post_tags posttag0_
  GROUP BY posttag0_.tag_id
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1757, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_221_GET_api_admin_logs_1(_con)
  local _api = "GET /api/admin/logs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1758
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1758, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1759
  _sql = [[
  SELECT log0_.id AS id1_5_, log0_.create_time AS create_t2_5_, log0_.deleted AS deleted3_5_, log0_.update_time AS update_t4_5_, log0_.content AS content5_5_
  	, log0_.ip_address AS ip_addre6_5_, log0_.log_key AS log_key7_5_, log0_.type AS type8_5_
  FROM logs log0_
  ORDER BY log0_.update_time DESC
  LIMIT 50
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1759, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_222_GET_api_admin_themes_codelunatic_simple_settings_1(_con)
  local _api = "GET /api/admin/themes/codelunatic_simple/settings"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1760
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1760, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1761
  _sql = [[
  SELECT themesetti0_.id AS id1_14_, themesetti0_.create_time AS create_t2_14_, themesetti0_.deleted AS deleted3_14_, themesetti0_.update_time AS update_t4_14_, themesetti0_.setting_key AS setting_5_14_
  	, themesetti0_.theme_id AS theme_id6_14_, themesetti0_.setting_value AS setting_7_14_
  FROM theme_settings themesetti0_
  WHERE themesetti0_.theme_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "theme_settings", "theme_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1761, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_223_PUT_api_admin_menus_x_1(_con)
  local _api = "PUT /api/admin/menus/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1762
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1762, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1763
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1763, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1764
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.id <> %s
  	AND menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1764, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1765
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1765, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1766 (ignored write)  _commit_f(_con, true)
  
end

function API_224_GET_api_admin_themes_caicai_anatole_files_content_1(_con)
  local _api = "GET /api/admin/themes/caicai_anatole/files/content"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1767
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1767, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_225_GET_api_admin_themes_SumiMakito_Journal_configurations_1(_con)
  local _api = "GET /api/admin/themes/SumiMakito_Journal/configurations"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1768
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1768, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_226_PUT_api_admin_menus_x_1(_con)
  local _api = "PUT /api/admin/menus/7"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1769
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1769, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1770
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1770, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1771
  _sql = [[
  SELECT menu0_.id AS col_0_0_
  FROM menus menu0_
  WHERE menu0_.id <> %s
  	AND menu0_.name = %s
  LIMIT 1
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "menus", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1771, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1772
  _sql = [[
  SELECT menu0_.id AS id1_6_0_, menu0_.create_time AS create_t2_6_0_, menu0_.deleted AS deleted3_6_0_, menu0_.update_time AS update_t4_6_0_, menu0_.icon AS icon5_6_0_
  	, menu0_.name AS name6_6_0_, menu0_.parent_id AS parent_i7_6_0_, menu0_.priority AS priority8_6_0_, menu0_.target AS target9_6_0_, menu0_.team AS team10_6_0_
  	, menu0_.url AS url11_6_0_
  FROM menus menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menus", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1772, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1773 (ignored write)  _commit_f(_con, true)
  
end

function API_227_PUT_api_admin_posts_comments_x_status_RECYCLE_1(_con)
  local _api = "PUT /api/admin/posts/comments/2/status/RECYCLE"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1774
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1774, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1775
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1775, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1776
  _sql = [[
  SELECT postcommen0_.id AS id2_2_0_, postcommen0_.create_time AS create_t3_2_0_, postcommen0_.deleted AS deleted4_2_0_, postcommen0_.update_time AS update_t5_2_0_, postcommen0_.author AS author6_2_0_
  	, postcommen0_.author_url AS author_u7_2_0_, postcommen0_.content AS content8_2_0_, postcommen0_.email AS email9_2_0_, postcommen0_.gravatar_md5 AS gravata10_2_0_, postcommen0_.ip_address AS ip_addr11_2_0_
  	, postcommen0_.is_admin AS is_admi12_2_0_, postcommen0_.parent_id AS parent_13_2_0_, postcommen0_.post_id AS post_id14_2_0_, postcommen0_.status AS status15_2_0_, postcommen0_.top_priority AS top_pri16_2_0_
  	, postcommen0_.user_agent AS user_ag17_2_0_
  FROM comments postcommen0_
  WHERE postcommen0_.id = %s
  	AND postcommen0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1776, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1777 (ignored write)  _commit_f(_con, true)
  
end

function API_228_PUT_api_admin_sheets_comments_x_status_RECYCLE_1(_con)
  local _api = "PUT /api/admin/sheets/comments/4/status/RECYCLE"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1778
  _sql = [[
  SELECT user0_.id AS id1_15_0_, user0_.create_time AS create_t2_15_0_, user0_.deleted AS deleted3_15_0_, user0_.update_time AS update_t4_15_0_, user0_.avatar AS avatar5_15_0_
  	, user0_.description AS descript6_15_0_, user0_.email AS email7_15_0_, user0_.expire_time AS expire_t8_15_0_, user0_.nickname AS nickname9_15_0_, user0_.password AS passwor10_15_0_
  	, user0_.username AS usernam11_15_0_
  FROM users user0_
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1778, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1779
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1779, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1780
  _sql = [[
  SELECT sheetcomme0_.id AS id2_2_0_, sheetcomme0_.create_time AS create_t3_2_0_, sheetcomme0_.deleted AS deleted4_2_0_, sheetcomme0_.update_time AS update_t5_2_0_, sheetcomme0_.author AS author6_2_0_
  	, sheetcomme0_.author_url AS author_u7_2_0_, sheetcomme0_.content AS content8_2_0_, sheetcomme0_.email AS email9_2_0_, sheetcomme0_.gravatar_md5 AS gravata10_2_0_, sheetcomme0_.ip_address AS ip_addr11_2_0_
  	, sheetcomme0_.is_admin AS is_admi12_2_0_, sheetcomme0_.parent_id AS parent_13_2_0_, sheetcomme0_.post_id AS post_id14_2_0_, sheetcomme0_.status AS status15_2_0_, sheetcomme0_.top_priority AS top_pri16_2_0_
  	, sheetcomme0_.user_agent AS user_ag17_2_0_
  FROM comments sheetcomme0_
  WHERE sheetcomme0_.id = %s
  	AND sheetcomme0_.type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "comments", "id", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "comments", "type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1780, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1781 (ignored write)  _commit_f(_con, true)
  
end

