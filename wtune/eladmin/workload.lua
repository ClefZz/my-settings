require("util")
require("config")
require("runtime")

-- cache global to local
local _begin_f = _begin
local _commit_f = _commit
local _timing_start_f = _timing_start
local _timing_end_f = _timing_end
local _line_inserted_f = _line_inserted
local _record_timing_f = _record_timing
local _record_params_and_result_f = _record_params_and_result
local _gen_parameter_f = gen_parameter

-- sec, nsec, id
local _txn_timer = { -1, -1 }
local _stmt_timer = { -1, -1 }

function API_1_GET_api_generator_tables_1(_con)
  local _api = "GET /api/generator/tables"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1 (ignored write)  _commit_f(_con, false)
  
end

function API_2_DELETE_api_permissions_x_1(_con)
  local _api = "DELETE /api/permissions/6"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 2
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 2, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 3
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 3, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 4 (ignored write)-- line 5 (ignored write)  _commit_f(_con, true)
  
end

function API_3_GET_auth_info_1(_con)
  local _api = "GET /auth/info"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 6
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 6, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 7
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 7, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 8
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 8, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 9
  _sql = [[
  SELECT useravatar0_.id AS id1_21_0_, useravatar0_.path AS path2_21_0_, useravatar0_.real_name AS real_nam3_21_0_, useravatar0_.size AS size4_21_0_
  FROM user_avatar useravatar0_
  WHERE useravatar0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user_avatar", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 9, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 10
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 10, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_4_DELETE_api_dept_x_1(_con)
  local _api = "DELETE /api/dept/13"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 11
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 11, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 12 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 13 (ignored write)  _commit_f(_con, false)
  
end

function API_5_DELETE_api_job_x_1(_con)
  local _api = "DELETE /api/job/20"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 14
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 14, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 15 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 16 (ignored write)  _commit_f(_con, false)
  
end

function API_6_DELETE_api_dept_x_1(_con)
  local _api = "DELETE /api/dept/12"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 17
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 17, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 18 (ignored write)  _commit_f(_con, true)
  
end

function API_7_DELETE_api_permissions_x_1(_con)
  local _api = "DELETE /api/permissions/60"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 19
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 19, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 20
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 20, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 21 (ignored write)-- line 22 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 23 (ignored write)  _commit_f(_con, false)
  
end

function API_8_PUT_api_aliPay_1(_con)
  local _api = "PUT /api/aliPay"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 24
  _sql = [[
  SELECT alipayconf0_.id AS id1_0_0_, alipayconf0_.app_id AS app_id2_0_0_, alipayconf0_.charset AS charset3_0_0_, alipayconf0_.format AS format4_0_0_, alipayconf0_.gateway_url AS gateway_5_0_0_
  	, alipayconf0_.notify_url AS notify_u6_0_0_, alipayconf0_.private_key AS private_7_0_0_, alipayconf0_.public_key AS public_k8_0_0_, alipayconf0_.return_url AS return_u9_0_0_, alipayconf0_.sign_type AS sign_ty10_0_0_
  	, alipayconf0_.sys_service_provider_id AS sys_ser11_0_0_
  FROM alipay_config alipayconf0_
  WHERE alipayconf0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "alipay_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 24, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_9_DELETE_api_job_x_1(_con)
  local _api = "DELETE /api/job/10"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 25
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 25, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 26 (ignored write)  _commit_f(_con, true)
  
end

function API_10_DELETE_api_jobs_x_1(_con)
  local _api = "DELETE /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 27
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 27, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 28 (ignored write)
  _begin_f(_con, false)

-- line 29 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 30 (ignored write)  _commit_f(_con, false)
  
end

function API_10_DELETE_api_jobs_x_2(_con)
  local _api = "DELETE /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 31
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 31, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 32 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 33 (ignored write)  _commit_f(_con, false)
  
end

function API_11_GET_api_permissions_tree_1(_con)
  local _api = "GET /api/permissions/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 34
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 34, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 35
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 35, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 36
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 36, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 37
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 37, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 38
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 38, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 39
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 39, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 40
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 40, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 41
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 41, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 42
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 42, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 43
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 43, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 44
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 44, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 45
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 45, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 46
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 46, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 47
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 47, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 48
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 48, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 49
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 49, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 50
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 50, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 51
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 51, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 52
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 52, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 53
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 53, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 54
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 54, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 55
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 55, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 56
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 56, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 57
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 57, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 58
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 58, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 59
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 59, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 60
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 60, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 61
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 61, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 62
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 62, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 63
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 63, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 64
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 64, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 65
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 65, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 66
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 66, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 67
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 67, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 68
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 68, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 69
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 69, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 70
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 70, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 71
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 71, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 72
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 72, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 73
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 73, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 74
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 74, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 75
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 75, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 76
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 76, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 77
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 77, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 78
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 78, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 79
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 79, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 80
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 80, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 81
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 81, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 82
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 82, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 83
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 83, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 84
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 84, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 85
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 85, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 86
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 86, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 87
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 87, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 88
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 88, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 89
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 89, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 90
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 90, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 91
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 91, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 92
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 92, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 93
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 93, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 94
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 94, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 95
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 95, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 96
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 96, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 97
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 97, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 98
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 98, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 99
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 99, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 100
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 100, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 101
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 101, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 102
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 102, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 103
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 103, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 104
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 104, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 105
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 105, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 106
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 106, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 107
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 107, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 108
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 108, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 109
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 109, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 110
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 110, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 111
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 111, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 112
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 112, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 113
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 113, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 114
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 114, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 115
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 115, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 116
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 116, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 117
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 117, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 118
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 118, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 119
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 119, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 120
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 120, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 121
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 121, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 122
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 122, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 123
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 123, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 124
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 124, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 125
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 125, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 126
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 126, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 127
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 127, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 128
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 128, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 129
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 129, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 130
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 130, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 131
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 131, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 132
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 132, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 133
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 133, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 134
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 134, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 135
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 135, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 136
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 136, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 137
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 137, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 138
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 138, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 139
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 139, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 140
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 140, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 141
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 141, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 142
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 142, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 143
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 143, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 144
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 144, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 145
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 145, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 146
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 146, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 147
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 147, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 148
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 148, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 149
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 149, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 150
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 150, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 151
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 151, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 152
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 152, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 153
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 153, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 154
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 154, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 155
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 155, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 156
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 156, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 157
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 157, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 158
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 158, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 159
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 159, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 160
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 160, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 161
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 161, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 162
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 162, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 163
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 163, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 164
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 164, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 165
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 165, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 166
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 166, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_11_GET_api_permissions_tree_2(_con)
  local _api = "GET /api/permissions/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 167
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 167, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 168
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 168, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 169
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 169, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 170
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 170, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 171
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 171, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 172
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 172, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 173
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 173, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 174
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 174, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 175
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 175, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 176
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 176, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 177
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 177, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 178
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 178, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 179
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 179, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 180
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 180, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 181
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 181, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 182
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 182, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 183
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 183, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 184
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 184, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 185
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 185, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 186
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 186, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 187
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 187, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 188
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 188, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 189
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 189, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 190
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 190, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 191
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 191, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 192
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 192, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 193
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 193, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 194
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 194, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 195
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 195, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 196
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 196, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 197
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 197, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 198
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 198, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 199
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 199, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 200
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 200, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 201
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 201, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 202
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 202, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 203
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 203, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 204
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 204, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 205
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 205, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 206
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 206, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 207
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 207, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 208
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 208, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 209
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 209, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 210
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 210, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 211
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 211, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 212
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 212, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 213
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 213, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 214
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 214, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 215
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 215, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 216
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 216, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 217
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 217, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 218
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 218, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 219
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 219, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 220
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 220, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 221
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 221, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 222
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 222, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 223
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 223, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 224
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 224, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 225
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 225, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 226
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 226, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 227
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 227, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 228
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 228, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 229
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 229, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 230
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 230, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 231
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 231, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 232
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 232, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 233
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 233, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 234
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 234, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 235
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 235, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 236
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 236, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 237
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 237, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 238
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 238, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 239
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 239, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 240
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 240, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 241
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 241, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 242
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 242, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 243
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 243, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 244
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 244, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 245
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 245, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 246
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 246, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 247
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 247, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 248
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 248, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 249
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 249, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 250
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 250, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 251
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 251, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 252
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 252, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 253
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 253, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 254
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 254, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 255
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 255, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 256
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 256, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 257
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 257, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 258
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 258, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 259
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 259, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 260
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 260, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 261
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 261, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 262
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 262, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 263
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 263, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 264
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 264, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 265
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 265, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 266
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 266, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 267
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 267, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 268
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 268, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 269
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 269, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 270
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 270, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 271
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 271, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 272
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 272, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 273
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 273, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 274
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 274, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 275
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 275, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 276
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 276, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 277
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 277, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 278
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 278, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 279
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 279, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 280
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 280, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 281
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 281, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 282
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 282, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 283
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 283, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 284
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 284, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 285
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 285, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 286
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 286, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 287
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 287, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 288
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 288, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 289
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 289, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 290
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 290, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 291
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 291, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 292
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 292, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 293
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 293, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 294
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 294, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 295
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 295, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 296
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 296, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 297
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 297, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 298
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 298, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 299
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 299, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_11_GET_api_permissions_tree_3(_con)
  local _api = "GET /api/permissions/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 300
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 300, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 301
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 301, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 302
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 302, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 303
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 303, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 304
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 304, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 305
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 305, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 306
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 306, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 307
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 307, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 308
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 308, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 309
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 309, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 310
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 310, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 311
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 311, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 312
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 312, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 313
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 313, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 314
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 314, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 315
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 315, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 316
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 316, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 317
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 317, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 318
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 318, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 319
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 319, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 320
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 320, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 321
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 321, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 322
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 322, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 323
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 323, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 324
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 324, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 325
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 325, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 326
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 326, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 327
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 327, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 328
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 328, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 329
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 329, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 330
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 330, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 331
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 331, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 332
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 332, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 333
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 333, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 334
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 334, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 335
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 335, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 336
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 336, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 337
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 337, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 338
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 338, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 339
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 339, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 340
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 340, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 341
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 341, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 342
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 342, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 343
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 343, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 344
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 344, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 345
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 345, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 346
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 346, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 347
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 347, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 348
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 348, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 349
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 349, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 350
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 350, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 351
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 351, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 352
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 352, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 353
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 353, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 354
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 354, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 355
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 355, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 356
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 356, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 357
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 357, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 358
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 358, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 359
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 359, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 360
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 360, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 361
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 361, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 362
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 362, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 363
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 363, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 364
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 364, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 365
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 365, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 366
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 366, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 367
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 367, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 368
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 368, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 369
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 369, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 370
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 370, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 371
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 371, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 372
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 372, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 373
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 373, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 374
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 374, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 375
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 375, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 376
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 376, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 377
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 377, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 378
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 378, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 379
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 379, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 380
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 380, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 381
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 381, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 382
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 382, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 383
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 383, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 384
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 384, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 385
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 385, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 386
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 386, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 387
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 387, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 388
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 388, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 389
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 389, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 390
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 390, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 391
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 391, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 392
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 392, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 393
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 393, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 394
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 394, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 395
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 395, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 396
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 396, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 397
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 397, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 398
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 398, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 399
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 399, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 400
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 400, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 401
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 401, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 402
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 402, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 403
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 403, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 404
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 404, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 405
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 405, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 406
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 406, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 407
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 407, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 408
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 408, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 409
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 409, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 410
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 410, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 411
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 411, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 412
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 412, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 413
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 413, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 414
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 414, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 415
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 415, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 416
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 416, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 417
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 417, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 418
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 418, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 419
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 419, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 420
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 420, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 421
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 421, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 422
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 422, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 423
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 423, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 424
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 424, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 425
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 425, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 426
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 426, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 427
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 427, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 428
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 428, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 429
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 429, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 430
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 430, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 431
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 431, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 432
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 432, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 433
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 433, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 434
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 434, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 435
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 435, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_11_GET_api_permissions_tree_4(_con)
  local _api = "GET /api/permissions/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 436
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 436, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 437
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 437, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 438
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 438, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 439
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 439, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 440
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 440, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 441
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 441, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 442
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 442, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 443
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 443, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 444
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 444, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 445
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 445, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 446
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 446, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 447
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 447, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 448
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 448, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 449
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 449, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 450
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 450, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 451
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 451, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 452
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 452, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 453
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 453, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 454
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 454, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 455
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 455, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 456
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 456, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 457
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 457, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 458
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 458, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 459
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 459, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 460
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 460, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 461
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 461, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 462
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 462, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 463
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 463, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 464
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 464, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 465
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 465, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 466
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 466, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 467
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 467, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 468
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 468, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 469
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 469, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 470
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 470, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 471
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 471, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 472
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 472, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 473
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 473, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 474
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 474, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 475
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 475, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 476
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 476, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 477
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 477, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 478
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 478, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 479
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 479, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 480
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 480, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 481
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 481, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 482
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 482, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 483
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 483, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 484
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 484, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 485
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 485, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 486
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 486, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 487
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 487, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 488
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 488, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 489
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 489, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 490
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 490, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 491
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 491, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 492
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 492, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 493
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 493, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 494
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 494, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 495
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 495, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 496
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 496, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 497
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 497, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 498
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 498, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 499
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 499, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 500
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 500, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 501
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 501, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 502
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 502, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 503
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 503, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 504
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 504, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 505
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 505, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 506
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 506, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 507
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 507, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 508
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 508, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 509
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 509, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 510
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 510, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 511
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 511, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 512
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 512, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 513
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 513, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 514
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 514, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 515
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 515, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 516
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 516, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 517
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 517, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 518
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 518, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 519
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 519, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 520
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 520, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 521
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 521, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 522
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 522, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 523
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 523, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 524
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 524, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 525
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 525, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 526
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 526, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 527
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 527, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 528
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 528, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 529
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 529, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 530
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 530, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 531
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 531, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 532
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 532, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 533
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 533, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 534
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 534, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 535
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 535, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 536
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 536, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 537
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 537, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 538
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 538, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 539
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 539, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 540
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 540, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 541
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 541, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 542
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 542, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 543
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 543, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 544
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 544, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 545
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 545, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 546
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 546, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 547
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 547, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 548
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 548, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 549
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 549, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 550
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 550, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 551
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 551, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 552
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 552, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 553
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 553, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 554
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 554, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 555
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 555, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 556
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 556, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 557
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 557, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 558
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 558, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 559
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 559, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 560
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 560, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 561
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 561, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 562
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 562, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 563
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 563, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 564
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 564, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 565
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 565, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 566
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 566, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 567
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 567, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 568
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 568, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 569
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 569, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_12_GET_api_roles_all_1(_con)
  local _api = "GET /api/roles/all"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 570
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  ORDER BY role0_.level ASC
  LIMIT 2000
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 570, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 571
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 571, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 572
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 572, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 573
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 573, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 574
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 574, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 575
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 575, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 576
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 576, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 577
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 577, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 578
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 578, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 579
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 579, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 580
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 580, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 581
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 581, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 582
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 582, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 583
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 583, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 584
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 584, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_12_GET_api_roles_all_2(_con)
  local _api = "GET /api/roles/all"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 585 (ignored write)  _commit_f(_con, false)
  
end

function API_12_GET_api_roles_all_3(_con)
  local _api = "GET /api/roles/all"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 586 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 587
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  ORDER BY role0_.level ASC
  LIMIT 2000
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 587, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 588
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 588, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 589
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 589, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 590
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 590, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 591
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 591, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 592
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 592, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 593
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 593, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 594
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 594, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 595
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 595, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 596
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 596, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 597
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 597, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 598
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 598, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 599
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 599, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 600
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 600, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 601
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 601, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_1(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 602
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.name LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 602, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_2(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 603 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 604
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.name LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 604, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_3(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 605
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.enabled = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 605, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 606
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 606, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 607
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 607, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 608
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 608, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 609
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 609, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 610
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 610, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 611
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 611, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_4(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 612
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 612, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_5(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 613 (ignored write)  _commit_f(_con, false)
  
  -- line 614
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 614, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_6(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 615
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 615, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 616 (ignored write)  _commit_f(_con, false)
  
  -- line 617
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 617, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 618
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 618, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 619
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 619, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 620
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 620, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 621
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 621, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 622
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 622, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 623
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 623, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_7(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 624 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 625
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 625, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 626
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 626, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 627
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 627, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 628
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 628, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 629
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 629, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 630
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 630, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 631
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 631, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_8(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 632
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.name LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 632, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 633
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 633, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 634
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 634, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 635
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 635, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 636
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 636, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 637
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 637, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 638
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 638, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_9(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 639
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.enabled = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 639, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 640
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 640, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 641
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 641, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 642
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 642, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 643
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 643, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 644
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 644, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_10(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 645
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.name LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 645, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 646 (ignored write)  _commit_f(_con, false)
  
  -- line 647
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 647, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 648
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 648, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 649
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 649, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 650
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 650, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 651
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 651, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 652
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 652, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_11(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 653 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 654
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.enabled = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 654, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 655
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 655, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 656
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 656, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 657
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 657, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 658
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 658, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 659
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 659, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 660
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 660, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_12(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 661
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 661, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 662
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 662, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 663
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 663, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 664
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 664, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 665
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 665, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 666
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 666, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 667
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 667, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 668
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 668, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_13_GET_api_dept_13(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 669 (ignored write)  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_14(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 670
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 670, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 671 (ignored write)  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_15(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 672
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 672, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 673
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 673, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 674
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 674, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 675
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 675, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 676
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 676, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 677
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 677, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 678
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 678, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 679
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 679, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 680 (ignored write)  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_16(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 681
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.enabled = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 681, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 682
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 682, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 683
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 683, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 684
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 684, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 685
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 685, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 686
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 686, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 687
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 687, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 688 (ignored write)  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_17(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 689
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 689, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 690
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 690, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 691
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 691, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 692
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 692, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 693
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 693, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 694
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 694, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 695
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 695, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 696
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 696, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 697
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 697, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 698 (ignored write)  _commit_f(_con, false)
  
end

function API_13_GET_api_dept_18(_con)
  local _api = "GET /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 699
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.enabled = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 699, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 700
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 700, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 701
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 701, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 702
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 702, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 703
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 703, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 704
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 704, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 705
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 705, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 706
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 706, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 707 (ignored write)  _commit_f(_con, false)
  
end

function API_14_DELETE_api_menus_x_1(_con)
  local _api = "DELETE /api/menus/40"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 708
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 708, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 709
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 709, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 710 (ignored write)-- line 711 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 712 (ignored write)  _commit_f(_con, false)
  
end

function API_15_GET_api_roles_x_1(_con)
  local _api = "GET /api/roles/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 713
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 713, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 714
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 714, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 715
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 715, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 716
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 716, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 717
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 717, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 718
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 718, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_16_PUT_api_roles_menu_1(_con)
  local _api = "PUT /api/roles/menu"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 719
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 719, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 720
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 720, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 721
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 721, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 722
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 722, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 723
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 723, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 724
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 724, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 725
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 725, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 726
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 726, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 727 (ignored write)  _commit_f(_con, true)
  
end

function API_16_PUT_api_roles_menu_2(_con)
  local _api = "PUT /api/roles/menu"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 728
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 728, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 729
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 729, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 730
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 730, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 731
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 731, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 732 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 733 (ignored write)  _commit_f(_con, false)
  
end

function API_17_POST_api_pictures_1(_con)
  local _api = "POST /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 734 (ignored write)  _commit_f(_con, false)
  
end

function API_17_POST_api_pictures_2(_con)
  local _api = "POST /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 735 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 736 (ignored write)  _commit_f(_con, false)
  
end

function API_17_POST_api_pictures_3(_con)
  local _api = "POST /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 737
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 737, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 738
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.is_pause = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "is_pause", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 738, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_18_GET_api_roles_x_1(_con)
  local _api = "GET /api/roles/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 739 (ignored write)  _commit_f(_con, false)
  
  -- line 740
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 740, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 741
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 741, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 742
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 742, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 743
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 743, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 744
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 744, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 745
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 745, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 746
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 746, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 747
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 747, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 748
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 748, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_19_POST_api_dict_1(_con)
  local _api = "POST /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 749 (ignored write)  _commit_f(_con, false)
  
end

function API_19_POST_api_dict_2(_con)
  local _api = "POST /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 750 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 751 (ignored write)  _commit_f(_con, false)
  
end

function API_20_PUT_api_roles_permission_1(_con)
  local _api = "PUT /api/roles/permission"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 752
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 752, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 753
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 753, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 754
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 754, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 755
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 755, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 756
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 756, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 757
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 757, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 758
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 758, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 759
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 759, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 760
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 760, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 761 (ignored write)-- line 762 (ignored write)-- line 763 (ignored write)-- line 764 (ignored write)-- line 765 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 766 (ignored write)  _commit_f(_con, false)
  
end

function API_21_GET_api_localStorage_1(_con)
  local _api = "GET /api/localStorage"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 767
  _sql = [[
  SELECT localstora0_.id AS id1_7_, localstora0_.create_time AS create_t2_7_, localstora0_.name AS name3_7_, localstora0_.operate AS operate4_7_, localstora0_.path AS path5_7_
  	, localstora0_.real_name AS real_nam6_7_, localstora0_.size AS size7_7_, localstora0_.suffix AS suffix8_7_, localstora0_.type AS type9_7_, localstora0_.update_time AS update_10_7_
  FROM local_storage localstora0_
  WHERE 1 = 1
  ORDER BY localstora0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 767, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_22_GET_api_visits_chartData_1(_con)
  local _api = "GET /api/visits/chartData"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 768
  _sql = [[
  SELECT `id`, `create_time`, `date`, `ip_counts`, `pv_counts`
  	, `week_day`
  FROM visits
  WHERE create_time BETWEEN %s AND %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_begin"}, nil}),
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_end"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 768, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_22_GET_api_visits_chartData_2(_con)
  local _api = "GET /api/visits/chartData"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 769
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 769, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 770
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.is_pause = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "is_pause", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 770, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_23_GET_api_visits_1(_con)
  local _api = "GET /api/visits"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 771
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 771, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 772
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 772, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 773
  _sql = [[
  SELECT `id`, `create_time`, `date`, `ip_counts`, `pv_counts`
  	, `week_day`
  FROM visits
  WHERE create_time BETWEEN %s AND %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_begin"}, nil}),
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_end"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 773, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_23_GET_api_visits_2(_con)
  local _api = "GET /api/visits"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 774
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 774, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 775
  _sql = [[
  SELECT `id`, `create_time`, `date`, `ip_counts`, `pv_counts`
  	, `week_day`
  FROM visits
  WHERE create_time BETWEEN %s AND %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_begin"}, nil}),
    _gen_parameter_f({_api, _sql, "visits", "create_time", {"select", "where", "between_end"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 775, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_24_PUT_api_menus_1(_con)
  local _api = "PUT /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 776
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 776, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 777
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 777, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 778
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.component_name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "component_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 778, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 779
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 779, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 780 (ignored write)  _commit_f(_con, true)
  
end

function API_24_PUT_api_menus_2(_con)
  local _api = "PUT /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 781
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 781, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 782
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 782, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 783
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 783, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 784 (ignored write)  _commit_f(_con, false)
  
end

function API_25_PUT_api_permissions_1(_con)
  local _api = "PUT /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 785
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 785, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 786
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 786, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 787 (ignored write)  _commit_f(_con, true)
  
end

function API_25_PUT_api_permissions_2(_con)
  local _api = "PUT /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 788
  _sql = [[
  SELECT permission0_.id AS id1_10_0_, permission0_.alias AS alias2_10_0_, permission0_.create_time AS create_t3_10_0_, permission0_.name AS name4_10_0_, permission0_.pid AS pid5_10_0_
  FROM permission permission0_
  WHERE permission0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 788, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 789
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 789, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 790 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 791 (ignored write)  _commit_f(_con, false)
  
end

function API_26_POST_api_email_1(_con)
  local _api = "POST /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 792 (ignored write)  _commit_f(_con, false)
  
end

function API_27_DELETE_api_users_x_1(_con)
  local _api = "DELETE /api/users/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 793
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 793, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 794
  _sql = [[
  SELECT user0_.id AS id1_20_0_, user0_.create_time AS create_t2_20_0_, user0_.dept_id AS dept_id9_20_0_, user0_.email AS email3_20_0_, user0_.enabled AS enabled4_20_0_
  	, user0_.job_id AS job_id10_20_0_, user0_.last_password_reset_time AS last_pas5_20_0_, user0_.password AS password6_20_0_, user0_.phone AS phone7_20_0_, user0_.avatar_id AS avatar_11_20_0_
  	, user0_.username AS username8_20_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_, job2_.id AS id1_6_2_, job2_.create_time AS create_t2_6_2_, job2_.dept_id AS dept_id6_6_2_, job2_.enabled AS enabled3_6_2_
  	, job2_.name AS name4_6_2_, job2_.sort AS sort5_6_2_, dept3_.id AS id1_1_3_, dept3_.create_time AS create_t2_1_3_, dept3_.enabled AS enabled3_1_3_
  	, dept3_.name AS name4_1_3_, dept3_.pid AS pid5_1_3_, useravatar4_.id AS id1_21_4_, useravatar4_.path AS path2_21_4_, useravatar4_.real_name AS real_nam3_21_4_
  	, useravatar4_.size AS size4_21_4_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  	LEFT JOIN job job2_ ON user0_.job_id = job2_.id
  	LEFT JOIN dept dept3_ ON job2_.dept_id = dept3_.id
  	LEFT JOIN user_avatar useravatar4_ ON user0_.avatar_id = useravatar4_.id
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 794, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 795 (ignored write)-- line 796 (ignored write)  _commit_f(_con, true)
  
end

function API_28_POST_api_users_updateEmail_x_1(_con)
  local _api = "POST /api/users/updateEmail/331873"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 797
  _sql = [[
  SELECT verificati0_.id AS id1_23_, verificati0_.code AS code2_23_, verificati0_.create_time AS create_t3_23_, verificati0_.scenes AS scenes4_23_, verificati0_.status AS status5_23_
  	, verificati0_.type AS type6_23_, verificati0_.value AS value7_23_
  FROM verification_code verificati0_
  WHERE verificati0_.scenes = %s
  	AND verificati0_.type = %s
  	AND verificati0_.value = %s
  	AND verificati0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "verification_code", "scenes", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "value", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 797, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 798
  _sql = [[
  SELECT verificati0_.id AS id1_23_0_, verificati0_.code AS code2_23_0_, verificati0_.create_time AS create_t3_23_0_, verificati0_.scenes AS scenes4_23_0_, verificati0_.status AS status5_23_0_
  	, verificati0_.type AS type6_23_0_, verificati0_.value AS value7_23_0_
  FROM verification_code verificati0_
  WHERE verificati0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "verification_code", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 798, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 799 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

-- line 800 (ignored write)-- line 801 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 802 (ignored write)  _commit_f(_con, false)
  
end

function API_29_PUT_api_jobs_exec_x_1(_con)
  local _api = "PUT /api/jobs/exec/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 803
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 803, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_29_PUT_api_jobs_exec_x_2(_con)
  local _api = "PUT /api/jobs/exec/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 804
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 804, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 805 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 806 (ignored write)  _commit_f(_con, false)
  
end

function API_30_DELETE_api_users_x_1(_con)
  local _api = "DELETE /api/users/6"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 807
  _sql = [[
  SELECT user0_.id AS id1_20_0_, user0_.create_time AS create_t2_20_0_, user0_.dept_id AS dept_id9_20_0_, user0_.email AS email3_20_0_, user0_.enabled AS enabled4_20_0_
  	, user0_.job_id AS job_id10_20_0_, user0_.last_password_reset_time AS last_pas5_20_0_, user0_.password AS password6_20_0_, user0_.phone AS phone7_20_0_, user0_.avatar_id AS avatar_11_20_0_
  	, user0_.username AS username8_20_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_, job2_.id AS id1_6_2_, job2_.create_time AS create_t2_6_2_, job2_.dept_id AS dept_id6_6_2_, job2_.enabled AS enabled3_6_2_
  	, job2_.name AS name4_6_2_, job2_.sort AS sort5_6_2_, dept3_.id AS id1_1_3_, dept3_.create_time AS create_t2_1_3_, dept3_.enabled AS enabled3_1_3_
  	, dept3_.name AS name4_1_3_, dept3_.pid AS pid5_1_3_, useravatar4_.id AS id1_21_4_, useravatar4_.path AS path2_21_4_, useravatar4_.real_name AS real_nam3_21_4_
  	, useravatar4_.size AS size4_21_4_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  	LEFT JOIN job job2_ ON user0_.job_id = job2_.id
  	LEFT JOIN dept dept3_ ON job2_.dept_id = dept3_.id
  	LEFT JOIN user_avatar useravatar4_ ON user0_.avatar_id = useravatar4_.id
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 807, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 808 (ignored write)-- line 809 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 810 (ignored write)  _commit_f(_con, false)
  
end

function API_31_GET_api_email_1(_con)
  local _api = "GET /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 811
  _sql = [[
  SELECT emailconfi0_.id AS id1_4_0_, emailconfi0_.from_user AS from_use2_4_0_, emailconfi0_.host AS host3_4_0_, emailconfi0_.pass AS pass4_4_0_, emailconfi0_.port AS port5_4_0_
  	, emailconfi0_.user AS user6_4_0_
  FROM email_config emailconfi0_
  WHERE emailconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "email_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 811, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_32_GET_api_users_1(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 812
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 812, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 813
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 813, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 814
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 814, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 815
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 815, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 816
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 816, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 817
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 817, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 818
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 818, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_2(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 819
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 819, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 820
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 820, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 821
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 821, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 822
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 822, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 823 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 824
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 824, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 825
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 825, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 826
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 826, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 827
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 827, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 828
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 828, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 829
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 829, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_3(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 830
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 830, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 831
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 831, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 832
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 832, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 833
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 833, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 834 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 835
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 835, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 836
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 836, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 837
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 837, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 838
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 838, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_4(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 839
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  	AND user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 839, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 840
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 840, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 841
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 841, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 842
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 842, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_5(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 843
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 843, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 844
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 844, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 845
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 845, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 846
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 846, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 847 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 848
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  	AND user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 848, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 849
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 849, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 850
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 850, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 851
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 851, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_6(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 852 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 853
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 853, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 854
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 854, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 855
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 855, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 856
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 856, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 857
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 857, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 858
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 858, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 859
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 859, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 860
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 860, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 861
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 861, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 862
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 862, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_32_GET_api_users_7(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 863
  _sql = [[
  SELECT dept0_.id AS id1_1_, dept0_.create_time AS create_t2_1_, dept0_.enabled AS enabled3_1_, dept0_.name AS name4_1_, dept0_.pid AS pid5_1_
  FROM dept dept0_
  WHERE dept0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 863, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 864
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 864, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_32_GET_api_users_8(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 865
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 865, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 866
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 866, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 867
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 867, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 868
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 868, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 869
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 869, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 870
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 870, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 871
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 871, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 872
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 872, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 873
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 873, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 874 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_9(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 875
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 875, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 876 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_10(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 877
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 877, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 878
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 878, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 879
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 879, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 880
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 880, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 881
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 881, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 882
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 882, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 883 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_11(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 884 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_12(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 885
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  	AND user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 885, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 886 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_13(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 887
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 887, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 888
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 888, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 889
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 889, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 890
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 890, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 891
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE dept1_.id IN (%s)
  	AND user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "in_list"}, nil}),
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 891, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 892 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_14(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 893
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 893, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 894
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 894, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 895
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 895, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 896
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 896, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 897
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 897, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 898
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 898, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 899
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 899, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 900
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 900, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 901
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 901, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 902
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 902, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 903
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 903, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 904
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 904, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 905 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_15(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 906
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 906, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 907
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 907, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 908
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 908, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 909
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 909, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 910
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 910, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 911
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 911, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 912
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 912, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 913
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 913, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 914
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 914, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 915
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 915, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 916
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 916, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 917
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 917, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 918
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 918, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 919
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 919, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 920
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 920, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 921
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 921, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 922 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_16(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 923
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 923, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 924
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 924, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 925
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 925, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 926
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 926, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 927
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE user0_.enabled = %s
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "enabled", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 927, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 928
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 928, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 929
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 929, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 930
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 930, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 931
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 931, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 932
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 932, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 933
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 933, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 934
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 934, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 935
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 935, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 936 (ignored write)  _commit_f(_con, false)
  
end

function API_32_GET_api_users_17(_con)
  local _api = "GET /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 937
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY user0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 937, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 938
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 938, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 939
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 939, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 940
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 940, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 941
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 941, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 942
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 942, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 943
  _sql = [[
  SELECT useravatar0_.id AS id1_21_0_, useravatar0_.path AS path2_21_0_, useravatar0_.real_name AS real_nam3_21_0_, useravatar0_.size AS size4_21_0_
  FROM user_avatar useravatar0_
  WHERE useravatar0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user_avatar", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 943, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 944
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 944, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 945
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 945, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 946
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 946, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 947 (ignored write)  _commit_f(_con, false)
  
end

function API_33_GET_api_logs_1(_con)
  local _api = "GET /api/logs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 948
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 948, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 949
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM log log0_
  WHERE log0_.log_type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 949, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_33_GET_api_logs_2(_con)
  local _api = "GET /api/logs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 950
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 950, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 951
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 951, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_33_GET_api_logs_3(_con)
  local _api = "GET /api/logs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 952
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT %s, 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "", "", {"select", "limit", "limit"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 952, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 953
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 953, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_34_DELETE_api_menus_x_1(_con)
  local _api = "DELETE /api/menus/33"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 954
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 954, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 955
  _sql = [[
  SELECT menu0_.id AS id1_9_0_, menu0_.cache AS cache2_9_0_, menu0_.component AS componen3_9_0_, menu0_.component_name AS componen4_9_0_, menu0_.create_time AS create_t5_9_0_
  	, menu0_.hidden AS hidden6_9_0_, menu0_.i_frame AS i_frame7_9_0_, menu0_.icon AS icon8_9_0_, menu0_.name AS name9_9_0_, menu0_.path AS path10_9_0_
  	, menu0_.pid AS pid11_9_0_, menu0_.sort AS sort12_9_0_
  FROM menu menu0_
  WHERE menu0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 955, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 956 (ignored write)-- line 957 (ignored write)  _commit_f(_con, true)
  
end

function API_35_GET_api_logs_error_x_1(_con)
  local _api = "GET /api/logs/error/14269"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 958
  _sql = [[
  SELECT exception_detail
  FROM log
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 958, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_36_POST_auth_login_1(_con)
  local _api = "POST /auth/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 959
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 959, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 960
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 960, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 961
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 961, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 962
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 962, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_36_POST_auth_login_2(_con)
  local _api = "POST /auth/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 963 (ignored write)  _commit_f(_con, false)
  
end

function API_36_POST_auth_login_3(_con)
  local _api = "POST /auth/login"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 964
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 964, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 965
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 965, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 966
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 966, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 967
  _sql = [[
  SELECT useravatar0_.id AS id1_21_0_, useravatar0_.path AS path2_21_0_, useravatar0_.real_name AS real_nam3_21_0_, useravatar0_.size AS size4_21_0_
  FROM user_avatar useravatar0_
  WHERE useravatar0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user_avatar", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 967, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 968
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 968, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 969 (ignored write)  _commit_f(_con, false)
  
end

function API_37_GET_api_permissions_1(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 970 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 971
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 971, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_37_GET_api_permissions_2(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 972 (ignored write)  _commit_f(_con, false)
  
  -- line 973
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 973, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 974
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 974, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 975
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 975, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_37_GET_api_permissions_3(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 976
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.name LIKE %s
  	OR permission0_.alias LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "permission", "alias", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 976, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_37_GET_api_permissions_4(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 977
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 977, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 978 (ignored write)
end

function API_37_GET_api_permissions_5(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 979 (ignored write)  _commit_f(_con, false)
  
end

function API_37_GET_api_permissions_6(_con)
  local _api = "GET /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 980
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 980, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 981
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 981, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 982
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 982, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 983 (ignored write)  _commit_f(_con, false)
  
end

function API_38_PUT_api_dictDetail_1(_con)
  local _api = "PUT /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 984
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_0_, dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.label AS label2_3_0_, dictdetail0_.sort AS sort3_3_0_, dictdetail0_.value AS value4_3_0_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 984, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 985 (ignored write)  _commit_f(_con, true)
  
end

function API_38_PUT_api_dictDetail_2(_con)
  local _api = "PUT /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 986
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_0_, dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.label AS label2_3_0_, dictdetail0_.sort AS sort3_3_0_, dictdetail0_.value AS value4_3_0_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 986, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 987 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 988 (ignored write)  _commit_f(_con, false)
  
end

function API_39_DELETE_api_roles_x_1(_con)
  local _api = "DELETE /api/roles/5"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 989
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 989, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 990 (ignored write)-- line 991 (ignored write)-- line 992 (ignored write)-- line 993 (ignored write)  _commit_f(_con, true)
  
end

function API_39_DELETE_api_roles_x_2(_con)
  local _api = "DELETE /api/roles/5"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 994
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 994, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 995 (ignored write)-- line 996 (ignored write)-- line 997 (ignored write)-- line 998 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 999 (ignored write)  _commit_f(_con, false)
  
end

function API_40_DELETE_api_dict_x_1(_con)
  local _api = "DELETE /api/dict/7"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1000 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1001
  _sql = [[
  SELECT dict0_.id AS id1_2_0_, dict0_.name AS name2_2_0_, dict0_.remark AS remark3_2_0_
  FROM dict dict0_
  WHERE dict0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1001, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1002
  _sql = [[
  SELECT dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.id AS id1_3_0_, dictdetail0_.id AS id1_3_1_, dictdetail0_.dict_id AS dict_id5_3_1_, dictdetail0_.label AS label2_3_1_
  	, dictdetail0_.sort AS sort3_3_1_, dictdetail0_.value AS value4_3_1_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.dict_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "dict_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1002, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1003 (ignored write)  _commit_f(_con, true)
  
end

function API_40_DELETE_api_dict_x_2(_con)
  local _api = "DELETE /api/dict/7"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1004
  _sql = [[
  SELECT dict0_.id AS id1_2_0_, dict0_.name AS name2_2_0_, dict0_.remark AS remark3_2_0_
  FROM dict dict0_
  WHERE dict0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1004, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1005
  _sql = [[
  SELECT dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.id AS id1_3_0_, dictdetail0_.id AS id1_3_1_, dictdetail0_.dict_id AS dict_id5_3_1_, dictdetail0_.label AS label2_3_1_
  	, dictdetail0_.sort AS sort3_3_1_, dictdetail0_.value AS value4_3_1_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.dict_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "dict_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1005, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1006 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1007 (ignored write)  _commit_f(_con, false)
  
end

function API_41_GET_api_logs_error_1(_con)
  local _api = "GET /api/logs/error"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1008
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1008, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_42_GET_api_pictures_1(_con)
  local _api = "GET /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1009
  _sql = [[
  SELECT picture0_.id AS id1_11_, picture0_.create_time AS create_t2_11_, picture0_.delete_url AS delete_u3_11_, picture0_.filename AS filename4_11_, picture0_.height AS height5_11_
  	, picture0_.size AS size6_11_, picture0_.url AS url7_11_, picture0_.username AS username8_11_, picture0_.width AS width9_11_
  FROM picture picture0_
  WHERE 1 = 1
  ORDER BY picture0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1009, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_42_GET_api_pictures_2(_con)
  local _api = "GET /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1010 (ignored write)  _commit_f(_con, false)
  
end

function API_42_GET_api_pictures_3(_con)
  local _api = "GET /api/pictures"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1011
  _sql = [[
  SELECT picture0_.id AS id1_11_, picture0_.create_time AS create_t2_11_, picture0_.delete_url AS delete_u3_11_, picture0_.filename AS filename4_11_, picture0_.height AS height5_11_
  	, picture0_.size AS size6_11_, picture0_.url AS url7_11_, picture0_.username AS username8_11_, picture0_.width AS width9_11_
  FROM picture picture0_
  WHERE 1 = 1
  ORDER BY picture0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1011, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1012 (ignored write)  _commit_f(_con, false)
  
end

function API_43_POST_api_permissions_1(_con)
  local _api = "POST /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1013
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1013, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1014 (ignored write)  _commit_f(_con, true)
  
end

function API_43_POST_api_permissions_2(_con)
  local _api = "POST /api/permissions"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1015
  _sql = [[
  SELECT permission0_.id AS id1_10_, permission0_.alias AS alias2_10_, permission0_.create_time AS create_t3_10_, permission0_.name AS name4_10_, permission0_.pid AS pid5_10_
  FROM permission permission0_
  WHERE permission0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "permission", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1015, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1016 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1017 (ignored write)  _commit_f(_con, false)
  
end

function API_44_PUT_api_dict_1(_con)
  local _api = "PUT /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1018
  _sql = [[
  SELECT dict0_.id AS id1_2_0_, dict0_.name AS name2_2_0_, dict0_.remark AS remark3_2_0_
  FROM dict dict0_
  WHERE dict0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1018, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1019 (ignored write)  _commit_f(_con, true)
  
end

function API_44_PUT_api_dict_2(_con)
  local _api = "PUT /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1020
  _sql = [[
  SELECT dict0_.id AS id1_2_0_, dict0_.name AS name2_2_0_, dict0_.remark AS remark3_2_0_
  FROM dict dict0_
  WHERE dict0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1020, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1021 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1022 (ignored write)  _commit_f(_con, false)
  
end

function API_45_POST_api_localStorage_1(_con)
  local _api = "POST /api/localStorage"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1023 (ignored write)  _commit_f(_con, false)
  
end

function API_46_GET_api_genConfig_1(_con)
  local _api = "GET /api/genConfig"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1024
  _sql = [[
  SELECT genconfig0_.id AS id1_5_0_, genconfig0_.api_path AS api_path2_5_0_, genconfig0_.author AS author3_5_0_, genconfig0_.cover AS cover4_5_0_, genconfig0_.module_name AS module_n5_5_0_
  	, genconfig0_.pack AS pack6_5_0_, genconfig0_.path AS path7_5_0_, genconfig0_.prefix AS prefix8_5_0_
  FROM gen_config genconfig0_
  WHERE genconfig0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "gen_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1024, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_47_GET_api_roles_level_1(_con)
  local _api = "GET /api/roles/level"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1025 (ignored write)  _commit_f(_con, false)
  
end

function API_48_DELETE_api_localStorage_x_1(_con)
  local _api = "DELETE /api/localStorage/20"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1026
  _sql = [[
  SELECT localstora0_.id AS id1_7_0_, localstora0_.create_time AS create_t2_7_0_, localstora0_.name AS name3_7_0_, localstora0_.operate AS operate4_7_0_, localstora0_.path AS path5_7_0_
  	, localstora0_.real_name AS real_nam6_7_0_, localstora0_.size AS size7_7_0_, localstora0_.suffix AS suffix8_7_0_, localstora0_.type AS type9_7_0_, localstora0_.update_time AS update_10_7_0_
  FROM local_storage localstora0_
  WHERE localstora0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "local_storage", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1026, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1027 (ignored write)  _commit_f(_con, true)
  
end

function API_49_GET_api_logs_error_x_1(_con)
  local _api = "GET /api/logs/error/14326"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1028
  _sql = [[
  SELECT exception_detail
  FROM log
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1028, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_50_POST_api_users_1(_con)
  local _api = "POST /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1029
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1029, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1030
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1030, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1031
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1031, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1032
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1032, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1033
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1033, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1034
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1034, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1035
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1035, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1036
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1036, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1037
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1037, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1038
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1038, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1039
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1039, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1040
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1040, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1041
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1041, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1042
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1042, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1043
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1043, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1044
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1044, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1045
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1045, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1046
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1046, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1047
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1047, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1048 (ignored write)-- line 1049 (ignored write)-- line 1050 (ignored write)-- line 1051 (ignored write)  _commit_f(_con, true)
  
end

function API_50_POST_api_users_2(_con)
  local _api = "POST /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1052
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1052, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1053
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1053, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1054 (ignored write)-- line 1055 (ignored write)-- line 1056 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1057 (ignored write)  _commit_f(_con, false)
  
end

function API_51_GET_api_redis_1(_con)
  local _api = "GET /api/redis"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1058 (ignored write)  _commit_f(_con, false)
  
end

function API_52_POST_api_job_1(_con)
  local _api = "POST /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1059 (ignored write)  _commit_f(_con, false)
  
end

function API_52_POST_api_job_2(_con)
  local _api = "POST /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1060 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1061 (ignored write)  _commit_f(_con, false)
  
end

function API_53_GET_api_aliPay_1(_con)
  local _api = "GET /api/aliPay"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1062
  _sql = [[
  SELECT alipayconf0_.id AS id1_0_0_, alipayconf0_.app_id AS app_id2_0_0_, alipayconf0_.charset AS charset3_0_0_, alipayconf0_.format AS format4_0_0_, alipayconf0_.gateway_url AS gateway_5_0_0_
  	, alipayconf0_.notify_url AS notify_u6_0_0_, alipayconf0_.private_key AS private_7_0_0_, alipayconf0_.public_key AS public_k8_0_0_, alipayconf0_.return_url AS return_u9_0_0_, alipayconf0_.sign_type AS sign_ty10_0_0_
  	, alipayconf0_.sys_service_provider_id AS sys_ser11_0_0_
  FROM alipay_config alipayconf0_
  WHERE alipayconf0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "alipay_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1062, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_54_GET_api_menus_tree_1(_con)
  local _api = "GET /api/menus/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1063
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1063, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1064
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1064, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1065
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1065, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1066
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1066, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1067
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1067, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1068
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1068, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1069
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1069, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1070
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1070, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1071
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1071, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1072
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1072, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1073
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1073, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1074
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1074, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1075
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1075, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1076
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1076, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1077
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1077, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1078
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1078, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1079
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1079, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1080
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1080, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1081
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1081, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1082
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1082, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1083
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1083, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1084
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1084, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1085
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1085, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1086
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1086, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1087
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1087, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1088
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1088, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1089
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1089, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1090
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1090, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1091
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1091, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1092
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1092, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1093
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1093, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1094
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1094, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1095
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1095, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1096
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1096, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1097
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1097, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1098
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1098, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1099
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1099, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1100
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1100, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1101
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1101, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1102
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1102, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1103
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1103, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1104
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1104, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1105
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1105, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1106
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1106, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1107
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1107, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1108
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1108, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1109
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1109, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1110
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1110, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1111
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1111, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1112
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1112, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1113
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1113, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1114
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1114, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1115
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1115, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1116
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1116, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1117
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1117, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1118
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1118, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1119
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1119, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1120
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1120, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1121
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1121, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1122
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1122, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1123
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1123, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1124
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1124, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1125
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1125, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1126
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1126, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1127
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1127, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1128
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1128, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1129
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1129, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1130
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1130, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1131
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1131, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1132
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1132, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1133
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1133, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1134
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1134, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1135
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1135, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1136
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1136, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1137
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1137, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1138
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1138, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1139
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1139, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1140
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1140, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1141
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1141, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1142
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1142, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1143
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1143, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1144
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1144, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1145
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1145, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1146
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1146, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1147
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1147, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1148
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1148, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1149
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1149, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1150
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1150, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1151
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1151, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1152
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1152, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1153
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1153, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1154
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1154, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1155
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1155, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1156
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1156, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1157
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1157, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1158
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1158, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1159
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1159, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1160
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1160, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1161
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1161, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1162
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1162, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1163
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1163, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1164
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1164, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1165
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1165, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_54_GET_api_menus_tree_2(_con)
  local _api = "GET /api/menus/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1166
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1166, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1167
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1167, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1168
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1168, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1169
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1169, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1170
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1170, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1171
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1171, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1172
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1172, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1173
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1173, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1174
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1174, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1175
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1175, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1176
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1176, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1177
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1177, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1178
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1178, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1179
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1179, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1180
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1180, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1181
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1181, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1182
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1182, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1183
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1183, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1184
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1184, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1185
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1185, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1186
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1186, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1187
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1187, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1188
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1188, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1189
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1189, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1190
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1190, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1191
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1191, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1192
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1192, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1193
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1193, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1194
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1194, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1195
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1195, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1196
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1196, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1197
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1197, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1198
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1198, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1199
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1199, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1200
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1200, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1201
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1201, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1202
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1202, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1203
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1203, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1204
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1204, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1205
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1205, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1206
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1206, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1207
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1207, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1208
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1208, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1209
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1209, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1210
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1210, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1211
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1211, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1212
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1212, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1213
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1213, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1214
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1214, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1215
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1215, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1216
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1216, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1217
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1217, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1218
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1218, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1219
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1219, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1220
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1220, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1221
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1221, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1222
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1222, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1223
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1223, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1224
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1224, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1225
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1225, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1226
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1226, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1227
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1227, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1228
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1228, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1229
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1229, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1230
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1230, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1231
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1231, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1232
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1232, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1233
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1233, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1234
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1234, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1235
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1235, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1236
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1236, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1237
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1237, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1238
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1238, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1239
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1239, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1240
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1240, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1241
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1241, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1242
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1242, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1243
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1243, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1244
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1244, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1245
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1245, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1246
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1246, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1247
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1247, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1248
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1248, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1249
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1249, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1250
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1250, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1251
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1251, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1252
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1252, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1253
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1253, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1254
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1254, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1255
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1255, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1256
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1256, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1257
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1257, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1258
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1258, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1259
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1259, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1260
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1260, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1261
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1261, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1262
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1262, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1263
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1263, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1264
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1264, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1265
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1265, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1266
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1266, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_54_GET_api_menus_tree_3(_con)
  local _api = "GET /api/menus/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

-- line 1267 (ignored write)  -- line 1268
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1268, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1269
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1269, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1270
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1270, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1271
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1271, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1272
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1272, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1273
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1273, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1274
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1274, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1275
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1275, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1276
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1276, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1277
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1277, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1278
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1278, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1279
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1279, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1280
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1280, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1281
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1281, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1282
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1282, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1283
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1283, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1284
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1284, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1285
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1285, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1286
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1286, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1287
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1287, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1288
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1288, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1289
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1289, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1290
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1290, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1291
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1291, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1292
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1292, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1293
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1293, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1294
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1294, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1295
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1295, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1296
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1296, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1297
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1297, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1298
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1298, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1299
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1299, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1300
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1300, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1301
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1301, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1302
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1302, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1303
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1303, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1304
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1304, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1305
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1305, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1306
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1306, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1307
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1307, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1308
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1308, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1309
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1309, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1310
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1310, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1311
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1311, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1312
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1312, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1313
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1313, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1314
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1314, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1315
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1315, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1316
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1316, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1317
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1317, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1318
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1318, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1319
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1319, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1320
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1320, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1321
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1321, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1322
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1322, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1323
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1323, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1324
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1324, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1325
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1325, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1326
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1326, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1327
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1327, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1328
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1328, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1329
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1329, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1330
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1330, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1331
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1331, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1332
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1332, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1333
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1333, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1334
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1334, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1335
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1335, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1336
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1336, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1337
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1337, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1338
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1338, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1339
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1339, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1340
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1340, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1341
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1341, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1342
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1342, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1343
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1343, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1344
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1344, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1345
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1345, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1346
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1346, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1347
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1347, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1348
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1348, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1349
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1349, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1350
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1350, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1351
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1351, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1352
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1352, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1353
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1353, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1354
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1354, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1355
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1355, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1356
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1356, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1357
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1357, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1358
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1358, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1359
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1359, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1360
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1360, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1361
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1361, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1362
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1362, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1363
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1363, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1364
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1364, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1365
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1365, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1366
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1366, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1367
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1367, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1368
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1368, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1369
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1369, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1370
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1370, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_54_GET_api_menus_tree_4(_con)
  local _api = "GET /api/menus/tree"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1371
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1371, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1372
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1372, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1373
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1373, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1374
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1374, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1375
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1375, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1376
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1376, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1377
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1377, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1378
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1378, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1379
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1379, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1380
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1380, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1381
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1381, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1382
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1382, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1383
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1383, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1384
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1384, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1385
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1385, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1386
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1386, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1387
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1387, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1388
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1388, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1389
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1389, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1390
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1390, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1391
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1391, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1392
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1392, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1393
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1393, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1394
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1394, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1395
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1395, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1396
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1396, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1397
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1397, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1398
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1398, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1399
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1399, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1400
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1400, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1401
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1401, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1402
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1402, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1403
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1403, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1404
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1404, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1405
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1405, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1406
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1406, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1407
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1407, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1408
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1408, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1409
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1409, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1410
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1410, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1411
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1411, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1412
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1412, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1413
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1413, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1414
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1414, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1415
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1415, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1416
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1416, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1417
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1417, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1418
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1418, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1419
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1419, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1420
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1420, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1421
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1421, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1422
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1422, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1423
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1423, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1424
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1424, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1425
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1425, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1426
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1426, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1427
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1427, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1428
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1428, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1429
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1429, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1430
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1430, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1431
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1431, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1432
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1432, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1433
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1433, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1434
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1434, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1435
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1435, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1436
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1436, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1437
  _sql = [[
  SELECT roles0_.menu_id AS menu_id2_18_0_, roles0_.role_id AS role_id1_18_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_menus roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.menu_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "menu_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1437, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1438
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1438, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1439
  _sql = [[
  SELECT roles0_.permission_id AS permissi2_19_0_, roles0_.role_id AS role_id1_19_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_permissions roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.permission_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "permission_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1439, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1440
  _sql = [[
  SELECT users0_.role_id AS role_id2_22_0_, users0_.user_id AS user_id1_22_0_, user1_.id AS id1_20_1_, user1_.create_time AS create_t2_20_1_, user1_.dept_id AS dept_id9_20_1_
  	, user1_.email AS email3_20_1_, user1_.enabled AS enabled4_20_1_, user1_.job_id AS job_id10_20_1_, user1_.last_password_reset_time AS last_pas5_20_1_, user1_.password AS password6_20_1_
  	, user1_.phone AS phone7_20_1_, user1_.avatar_id AS avatar_11_20_1_, user1_.username AS username8_20_1_, dept2_.id AS id1_1_2_, dept2_.create_time AS create_t2_1_2_
  	, dept2_.enabled AS enabled3_1_2_, dept2_.name AS name4_1_2_, dept2_.pid AS pid5_1_2_, job3_.id AS id1_6_3_, job3_.create_time AS create_t2_6_3_
  	, job3_.dept_id AS dept_id6_6_3_, job3_.enabled AS enabled3_6_3_, job3_.name AS name4_6_3_, job3_.sort AS sort5_6_3_, dept4_.id AS id1_1_4_
  	, dept4_.create_time AS create_t2_1_4_, dept4_.enabled AS enabled3_1_4_, dept4_.name AS name4_1_4_, dept4_.pid AS pid5_1_4_, useravatar5_.id AS id1_21_5_
  	, useravatar5_.path AS path2_21_5_, useravatar5_.real_name AS real_nam3_21_5_, useravatar5_.size AS size4_21_5_
  FROM users_roles users0_
  	INNER JOIN user user1_ ON users0_.user_id = user1_.id
  	LEFT JOIN dept dept2_ ON user1_.dept_id = dept2_.id
  	LEFT JOIN job job3_ ON user1_.job_id = job3_.id
  	LEFT JOIN dept dept4_ ON job3_.dept_id = dept4_.id
  	LEFT JOIN user_avatar useravatar5_ ON user1_.avatar_id = useravatar5_.id
  WHERE users0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1440, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1441
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1441, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1442
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1442, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1443
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1443, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1444
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1444, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1445
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1445, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1446
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1446, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1447
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1447, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1448
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1448, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1449
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1449, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1450
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1450, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1451
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1451, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1452
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1452, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1453
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1453, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1454
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1454, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1455
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1455, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1456
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1456, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1457
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1457, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1458
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1458, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1459
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1459, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1460
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1460, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1461
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1461, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1462
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1462, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1463
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1463, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1464
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1464, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1465
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1465, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1466
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1466, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1467
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1467, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1468
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1468, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1469
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1469, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1470
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1470, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1471
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1471, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1472
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1472, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1473
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.pid = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "pid", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1473, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_55_GET_api_menus_build_1(_con)
  local _api = "GET /api/menus/build"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1474
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  	LEFT JOIN roles_menus roles1_ ON menu0_.id = roles1_.menu_id
  	LEFT JOIN role role2_ ON roles1_.role_id = role2_.id
  WHERE role2_.id = %s
  ORDER BY menu0_.sort ASC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1474, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_55_GET_api_menus_build_2(_con)
  local _api = "GET /api/menus/build"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1475
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  	LEFT JOIN roles_menus roles1_ ON menu0_.id = roles1_.menu_id
  	LEFT JOIN role role2_ ON roles1_.role_id = role2_.id
  WHERE role2_.id = %s
  ORDER BY menu0_.sort ASC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1475, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1476 (ignored write)  _commit_f(_con, true)
  
end

function API_55_GET_api_menus_build_3(_con)
  local _api = "GET /api/menus/build"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1477 (ignored write)  _commit_f(_con, false)
  
  -- line 1478
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  	LEFT JOIN roles_menus roles1_ ON menu0_.id = roles1_.menu_id
  	LEFT JOIN role role2_ ON roles1_.role_id = role2_.id
  WHERE role2_.id = %s
  ORDER BY menu0_.sort ASC
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1478, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_56_GET_api_dict_1(_con)
  local _api = "GET /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1479
  _sql = [[
  SELECT dict0_.id AS id1_2_, dict0_.name AS name2_2_, dict0_.remark AS remark3_2_
  FROM dict dict0_
  WHERE 1 = 1
  ORDER BY dict0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1479, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_56_GET_api_dict_2(_con)
  local _api = "GET /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1480
  _sql = [[
  SELECT dict0_.id AS id1_2_, dict0_.name AS name2_2_, dict0_.remark AS remark3_2_
  FROM dict dict0_
  WHERE 1 = 1
  ORDER BY dict0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1480, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1481 (ignored write)  _commit_f(_con, false)
  
end

function API_56_GET_api_dict_3(_con)
  local _api = "GET /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1482
  _sql = [[
  SELECT dict0_.id AS id1_2_, dict0_.name AS name2_2_, dict0_.remark AS remark3_2_
  FROM dict dict0_
  WHERE dict0_.name LIKE %s
  	OR dict0_.remark LIKE %s
  ORDER BY dict0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "dict", "remark", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1482, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_56_GET_api_dict_4(_con)
  local _api = "GET /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1483
  _sql = [[
  SELECT dict0_.id AS id1_2_, dict0_.name AS name2_2_, dict0_.remark AS remark3_2_
  FROM dict dict0_
  WHERE dict0_.name LIKE %s
  	OR dict0_.remark LIKE %s
  ORDER BY dict0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "dict", "remark", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1483, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 1484 (ignored write)
end

function API_56_GET_api_dict_5(_con)
  local _api = "GET /api/dict"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1485 (ignored write)  _commit_f(_con, false)
  
end

function API_57_PUT_api_roles_1(_con)
  local _api = "PUT /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1486
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1486, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1487
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1487, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1488 (ignored write)-- line 1489 (ignored write)  _commit_f(_con, true)
  
end

function API_57_PUT_api_roles_2(_con)
  local _api = "PUT /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1490
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1490, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1491
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1491, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1492
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1492, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1493
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1493, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1494
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1494, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1495
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1495, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1496
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1496, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1497
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1497, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1498
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1498, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1499
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1499, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1500 (ignored write)-- line 1501 (ignored write)-- line 1502 (ignored write)-- line 1503 (ignored write)-- line 1504 (ignored write)  _commit_f(_con, true)
  
end

function API_57_PUT_api_roles_3(_con)
  local _api = "PUT /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1505
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1505, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1506
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1506, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1507
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1507, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1508
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1508, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1509
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1509, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1510
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1510, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1511
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1511, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1512
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1512, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1513 (ignored write)-- line 1514 (ignored write)-- line 1515 (ignored write)-- line 1516 (ignored write)  _commit_f(_con, true)
  
end

function API_57_PUT_api_roles_4(_con)
  local _api = "PUT /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1517
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1517, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1518
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1518, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1519 (ignored write)-- line 1520 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1521 (ignored write)  _commit_f(_con, false)
  
end

function API_58_PUT_api_users_1(_con)
  local _api = "PUT /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1522
  _sql = [[
  SELECT role0_.id AS id1_16_0_, role0_.create_time AS create_t2_16_0_, role0_.data_scope AS data_sco3_16_0_, role0_.level AS level4_16_0_, role0_.name AS name5_16_0_
  	, role0_.remark AS remark6_16_0_
  FROM role role0_
  WHERE role0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1522, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1523
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1523, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1524
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1524, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1525
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1525, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1526
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1526, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1527
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1527, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1528
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1528, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1529
  _sql = [[
  SELECT user0_.id AS id1_20_0_, user0_.create_time AS create_t2_20_0_, user0_.dept_id AS dept_id9_20_0_, user0_.email AS email3_20_0_, user0_.enabled AS enabled4_20_0_
  	, user0_.job_id AS job_id10_20_0_, user0_.last_password_reset_time AS last_pas5_20_0_, user0_.password AS password6_20_0_, user0_.phone AS phone7_20_0_, user0_.avatar_id AS avatar_11_20_0_
  	, user0_.username AS username8_20_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_, job2_.id AS id1_6_2_, job2_.create_time AS create_t2_6_2_, job2_.dept_id AS dept_id6_6_2_, job2_.enabled AS enabled3_6_2_
  	, job2_.name AS name4_6_2_, job2_.sort AS sort5_6_2_, dept3_.id AS id1_1_3_, dept3_.create_time AS create_t2_1_3_, dept3_.enabled AS enabled3_1_3_
  	, dept3_.name AS name4_1_3_, dept3_.pid AS pid5_1_3_, useravatar4_.id AS id1_21_4_, useravatar4_.path AS path2_21_4_, useravatar4_.real_name AS real_nam3_21_4_
  	, useravatar4_.size AS size4_21_4_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  	LEFT JOIN job job2_ ON user0_.job_id = job2_.id
  	LEFT JOIN dept dept3_ ON job2_.dept_id = dept3_.id
  	LEFT JOIN user_avatar useravatar4_ ON user0_.avatar_id = useravatar4_.id
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1529, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1530
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1530, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1531
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1531, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1532
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1532, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1533 (ignored write)-- line 1534 (ignored write)-- line 1535 (ignored write)  _commit_f(_con, true)
  
end

function API_58_PUT_api_users_2(_con)
  local _api = "PUT /api/users"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1536
  _sql = [[
  SELECT user0_.id AS id1_20_0_, user0_.create_time AS create_t2_20_0_, user0_.dept_id AS dept_id9_20_0_, user0_.email AS email3_20_0_, user0_.enabled AS enabled4_20_0_
  	, user0_.job_id AS job_id10_20_0_, user0_.last_password_reset_time AS last_pas5_20_0_, user0_.password AS password6_20_0_, user0_.phone AS phone7_20_0_, user0_.avatar_id AS avatar_11_20_0_
  	, user0_.username AS username8_20_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_, job2_.id AS id1_6_2_, job2_.create_time AS create_t2_6_2_, job2_.dept_id AS dept_id6_6_2_, job2_.enabled AS enabled3_6_2_
  	, job2_.name AS name4_6_2_, job2_.sort AS sort5_6_2_, dept3_.id AS id1_1_3_, dept3_.create_time AS create_t2_1_3_, dept3_.enabled AS enabled3_1_3_
  	, dept3_.name AS name4_1_3_, dept3_.pid AS pid5_1_3_, useravatar4_.id AS id1_21_4_, useravatar4_.path AS path2_21_4_, useravatar4_.real_name AS real_nam3_21_4_
  	, useravatar4_.size AS size4_21_4_
  FROM user user0_
  	LEFT JOIN dept dept1_ ON user0_.dept_id = dept1_.id
  	LEFT JOIN job job2_ ON user0_.job_id = job2_.id
  	LEFT JOIN dept dept3_ ON job2_.dept_id = dept3_.id
  	LEFT JOIN user_avatar useravatar4_ ON user0_.avatar_id = useravatar4_.id
  WHERE user0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1536, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1537
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1537, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1538
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.email = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "email", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1538, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1539
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1539, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1540 (ignored write)-- line 1541 (ignored write)-- line 1542 (ignored write)-- line 1543 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1544 (ignored write)  _commit_f(_con, false)
  
end

function API_59_DELETE_api_pictures_x_1(_con)
  local _api = "DELETE /api/pictures/1"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1545
  _sql = [[
  SELECT picture0_.id AS id1_11_0_, picture0_.create_time AS create_t2_11_0_, picture0_.delete_url AS delete_u3_11_0_, picture0_.filename AS filename4_11_0_, picture0_.height AS height5_11_0_
  	, picture0_.size AS size6_11_0_, picture0_.url AS url7_11_0_, picture0_.username AS username8_11_0_, picture0_.width AS width9_11_0_
  FROM picture picture0_
  WHERE picture0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "picture", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1545, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1546 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1547 (ignored write)  _commit_f(_con, false)
  
end

function API_60_GET_api_qiNiuConfig_1(_con)
  local _api = "GET /api/qiNiuConfig"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1548 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1549
  _sql = [[
  SELECT qiniuconfi0_.id AS id1_12_0_, qiniuconfi0_.access_key AS access_k2_12_0_, qiniuconfi0_.bucket AS bucket3_12_0_, qiniuconfi0_.host AS host4_12_0_, qiniuconfi0_.secret_key AS secret_k5_12_0_
  	, qiniuconfi0_.type AS type6_12_0_, qiniuconfi0_.zone AS zone7_12_0_
  FROM qiniu_config qiniuconfi0_
  WHERE qiniuconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "qiniu_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1549, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_1(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1550
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1550, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_2(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1551
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1551, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_3(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1552
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1552, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1553 (ignored write)  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_4(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1554 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1555
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1555, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_5(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1556 (ignored write)  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_6(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1557
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dictdetail0_.label LIKE %s
  	AND dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "label", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1557, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_7(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1558
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dictdetail0_.label LIKE %s
  	AND dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "label", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1558, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1559 (ignored write)  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_8(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1560 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1561
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1561, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_61_GET_api_dictDetail_9(_con)
  local _api = "GET /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1562
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_, dictdetail0_.dict_id AS dict_id5_3_, dictdetail0_.label AS label2_3_, dictdetail0_.sort AS sort3_3_, dictdetail0_.value AS value4_3_
  FROM dict_detail dictdetail0_
  	LEFT JOIN dict dict1_ ON dictdetail0_.dict_id = dict1_.id
  WHERE dict1_.name = %s
  ORDER BY dictdetail0_.sort ASC
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1562, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1563 (ignored write)  _commit_f(_con, false)
  
end

function API_62_DELETE_api_localStorage__1(_con)
  local _api = "DELETE /api/localStorage/"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1564
  _sql = [[
  SELECT localstora0_.id AS id1_7_0_, localstora0_.create_time AS create_t2_7_0_, localstora0_.name AS name3_7_0_, localstora0_.operate AS operate4_7_0_, localstora0_.path AS path5_7_0_
  	, localstora0_.real_name AS real_nam6_7_0_, localstora0_.size AS size7_7_0_, localstora0_.suffix AS suffix8_7_0_, localstora0_.type AS type9_7_0_, localstora0_.update_time AS update_10_7_0_
  FROM local_storage localstora0_
  WHERE localstora0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "local_storage", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1564, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1565
  _sql = [[
  SELECT localstora0_.id AS id1_7_0_, localstora0_.create_time AS create_t2_7_0_, localstora0_.name AS name3_7_0_, localstora0_.operate AS operate4_7_0_, localstora0_.path AS path5_7_0_
  	, localstora0_.real_name AS real_nam6_7_0_, localstora0_.size AS size7_7_0_, localstora0_.suffix AS suffix8_7_0_, localstora0_.type AS type9_7_0_, localstora0_.update_time AS update_10_7_0_
  FROM local_storage localstora0_
  WHERE localstora0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "local_storage", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1565, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1566 (ignored write)-- line 1567 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1568 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_1(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1569
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  	LEFT JOIN dept dept2_ ON job0_.dept_id = dept2_.id
  WHERE dept1_.id = %s
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1569, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1570
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1570, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1571
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1571, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1572
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1572, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1573
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1573, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1574 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_2(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1575
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  	LEFT JOIN dept dept2_ ON job0_.dept_id = dept2_.id
  WHERE dept1_.id = %s
  LIMIT 2000
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1575, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1576
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1576, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1577
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1577, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1578
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1578, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1579 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_3(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1580
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1580, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1581
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1581, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1582
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1582, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1583
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1583, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1584
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1584, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1585
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1585, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1586
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1586, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1587
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1587, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1588
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1588, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1589
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1589, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1590 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_4(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1591 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1592
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1592, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1593
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1593, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1594
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1594, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1595
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1595, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1596
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1596, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1597
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1597, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1598
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1598, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1599
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1599, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1600
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1600, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1601
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1601, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1602 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_5(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1603 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1604
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1604, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1605
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1605, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1606
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1606, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1607
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1607, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1608
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1608, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1609
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1609, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1610
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1610, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1611
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1611, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1612
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1612, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1613 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_6(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1614
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.name LIKE %s
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1614, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1615
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1615, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1616
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1616, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1617
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1617, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1618 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_7(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1619 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1620 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1621
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1621, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1622
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1622, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1623
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1623, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1624
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1624, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1625
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1625, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1626
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1626, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1627
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1627, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1628
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1628, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1629
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1629, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1630
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1630, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1631 (ignored write)  _commit_f(_con, false)
  
end

function API_63_GET_api_job_8(_con)
  local _api = "GET /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1632
  _sql = [[
  SELECT job0_.id AS id1_6_, job0_.create_time AS create_t2_6_, job0_.dept_id AS dept_id6_6_, job0_.enabled AS enabled3_6_, job0_.name AS name4_6_
  	, job0_.sort AS sort5_6_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE 1 = 1
  ORDER BY job0_.sort ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1632, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1633
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1633, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1634
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1634, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1635
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1635, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1636
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1636, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1637
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1637, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1638
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1638, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1639
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1639, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1640
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1640, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1641
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1641, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1642
  _sql = [[
  SELECT name
  FROM dept
  WHERE id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1642, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1643 (ignored write)  _commit_f(_con, false)
  
end

function API_64_GET_api_logs_user_1(_con)
  local _api = "GET /api/logs/user"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1644
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1644, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1645
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1645, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_64_GET_api_logs_user_2(_con)
  local _api = "GET /api/logs/user"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1646
  _sql = [[
  SELECT visits0_.id AS id1_24_, visits0_.create_time AS create_t2_24_, visits0_.date AS date3_24_, visits0_.ip_counts AS ip_count4_24_, visits0_.pv_counts AS pv_count5_24_
  	, visits0_.week_day AS week_day6_24_
  FROM visits visits0_
  WHERE visits0_.date = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "date", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1646, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1647
  _sql = [[
  SELECT COUNT(*)
  FROM (
  	SELECT request_ip
  	FROM log
  	WHERE create_time BETWEEN %s AND %s
  	GROUP BY request_ip
  ) s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "create_time", {"select", "where", "between_begin"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "create_time", {"select", "where", "between_end"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1647, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, true)

  -- line 1648
  _sql = [[
  SELECT visits0_.id AS id1_24_0_, visits0_.create_time AS create_t2_24_0_, visits0_.date AS date3_24_0_, visits0_.ip_counts AS ip_count4_24_0_, visits0_.pv_counts AS pv_count5_24_0_
  	, visits0_.week_day AS week_day6_24_0_
  FROM visits visits0_
  WHERE visits0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "visits", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1648, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1649 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, true)

  -- line 1650
  _sql = [[
  SELECT log0_.id AS id1_8_, log0_.address AS address2_8_, log0_.create_time AS create_t3_8_, log0_.description AS descript4_8_, log0_.exception_detail AS exceptio5_8_
  	, log0_.log_type AS log_type6_8_, log0_.method AS method7_8_, log0_.params AS params8_8_, log0_.request_ip AS request_9_8_, log0_.time AS time10_8_
  	, log0_.username AS usernam11_8_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ORDER BY log0_.id DESC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1650, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1651
  _sql = [[
  SELECT COUNT(log0_.id) AS col_0_0_
  FROM log log0_
  WHERE (log0_.username LIKE %s
  		OR log0_.description LIKE %s
  		OR log0_.address LIKE %s
  		OR log0_.request_ip LIKE %s
  		OR log0_.method LIKE %s
  		OR log0_.params LIKE %s)
  	AND log0_.log_type = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "log", "username", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "description", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "address", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "request_ip", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "method", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "params", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "log", "log_type", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1651, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_65_DELETE_api_pictures__1(_con)
  local _api = "DELETE /api/pictures/"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1652
  _sql = [[
  SELECT picture0_.id AS id1_11_0_, picture0_.create_time AS create_t2_11_0_, picture0_.delete_url AS delete_u3_11_0_, picture0_.filename AS filename4_11_0_, picture0_.height AS height5_11_0_
  	, picture0_.size AS size6_11_0_, picture0_.url AS url7_11_0_, picture0_.username AS username8_11_0_, picture0_.width AS width9_11_0_
  FROM picture picture0_
  WHERE picture0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "picture", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1652, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1653 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1654
  _sql = [[
  SELECT picture0_.id AS id1_11_0_, picture0_.create_time AS create_t2_11_0_, picture0_.delete_url AS delete_u3_11_0_, picture0_.filename AS filename4_11_0_, picture0_.height AS height5_11_0_
  	, picture0_.size AS size6_11_0_, picture0_.url AS url7_11_0_, picture0_.username AS username8_11_0_, picture0_.width AS width9_11_0_
  FROM picture picture0_
  WHERE picture0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "picture", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1654, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1655 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1656 (ignored write)  _commit_f(_con, false)
  
end

function API_66_POST_api_users_updatePass__1(_con)
  local _api = "POST /api/users/updatePass/"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1657 (ignored write)  _commit_f(_con, false)
  
end

function API_67_POST_api_dictDetail_1(_con)
  local _api = "POST /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1658 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1659 (ignored write)  _commit_f(_con, false)
  
end

function API_67_POST_api_dictDetail_2(_con)
  local _api = "POST /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1660 (ignored write)  _commit_f(_con, false)
  
end

function API_67_POST_api_dictDetail_3(_con)
  local _api = "POST /api/dictDetail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1661 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1662 (ignored write)  _commit_f(_con, false)
  
end

function API_68_GET_api_users_download_1(_con)
  local _api = "GET /api/users/download"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1663
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1663, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1664
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1664, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1665
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1665, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1666
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1666, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1667
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1667, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1668
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1668, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1669
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1669, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1670
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1670, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1671
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1671, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1672
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1672, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_68_GET_api_users_download_2(_con)
  local _api = "GET /api/users/download"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1673
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1673, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1674
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1674, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1675
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1675, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1676
  _sql = [[
  SELECT useravatar0_.id AS id1_21_0_, useravatar0_.path AS path2_21_0_, useravatar0_.real_name AS real_nam3_21_0_, useravatar0_.size AS size4_21_0_
  FROM user_avatar useravatar0_
  WHERE useravatar0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user_avatar", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1676, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1677
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1677, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1678
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1678, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1679
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1679, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
  -- line 1680
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1680, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1681
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1681, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1682
  _sql = [[
  SELECT roles0_.user_id AS user_id1_22_0_, roles0_.role_id AS role_id2_22_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM users_roles roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.user_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "users_roles", "user_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1682, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1683 (ignored write)  _commit_f(_con, false)
  
end

function API_69_PUT_api_jobs_1(_con)
  local _api = "PUT /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1684
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1684, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1685 (ignored write)  _commit_f(_con, true)
  
end

function API_69_PUT_api_jobs_2(_con)
  local _api = "PUT /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1686
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1686, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1687 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1688 (ignored write)  _commit_f(_con, false)
  
end

function API_70_POST_api_roles_1(_con)
  local _api = "POST /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1689
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1689, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1690 (ignored write)  _commit_f(_con, true)
  
end

function API_70_POST_api_roles_2(_con)
  local _api = "POST /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1691
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1691, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1692 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1693 (ignored write)  _commit_f(_con, false)
  
end

function API_71_POST_api_dept_1(_con)
  local _api = "POST /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1694 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1695 (ignored write)  _commit_f(_con, false)
  
end

function API_71_POST_api_dept_2(_con)
  local _api = "POST /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1696 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1697 (ignored write)  _commit_f(_con, false)
  
end

function API_72_POST_api_generator_1(_con)
  local _api = "POST /api/generator"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1698
  _sql = [[
  SELECT genconfig0_.id AS id1_5_0_, genconfig0_.api_path AS api_path2_5_0_, genconfig0_.author AS author3_5_0_, genconfig0_.cover AS cover4_5_0_, genconfig0_.module_name AS module_n5_5_0_
  	, genconfig0_.pack AS pack6_5_0_, genconfig0_.path AS path7_5_0_, genconfig0_.prefix AS prefix8_5_0_
  FROM gen_config genconfig0_
  WHERE genconfig0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "gen_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1698, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_73_POST_api_users_updateAvatar_1(_con)
  local _api = "POST /api/users/updateAvatar"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1699
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1699, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1700
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1700, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1701
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1701, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_73_POST_api_users_updateAvatar_2(_con)
  local _api = "POST /api/users/updateAvatar"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1702
  _sql = [[
  SELECT user0_.id AS id1_20_, user0_.create_time AS create_t2_20_, user0_.dept_id AS dept_id9_20_, user0_.email AS email3_20_, user0_.enabled AS enabled4_20_
  	, user0_.job_id AS job_id10_20_, user0_.last_password_reset_time AS last_pas5_20_, user0_.password AS password6_20_, user0_.phone AS phone7_20_, user0_.avatar_id AS avatar_11_20_
  	, user0_.username AS username8_20_
  FROM user user0_
  WHERE user0_.username = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "username", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1702, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1703
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1703, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1704
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1704, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1705 (ignored write)-- line 1706 (ignored write)  _commit_f(_con, true)
  
end

function API_74_PUT_api_localStorage_1(_con)
  local _api = "PUT /api/localStorage"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1707
  _sql = [[
  SELECT localstora0_.id AS id1_7_0_, localstora0_.create_time AS create_t2_7_0_, localstora0_.name AS name3_7_0_, localstora0_.operate AS operate4_7_0_, localstora0_.path AS path5_7_0_
  	, localstora0_.real_name AS real_nam6_7_0_, localstora0_.size AS size7_7_0_, localstora0_.suffix AS suffix8_7_0_, localstora0_.type AS type9_7_0_, localstora0_.update_time AS update_10_7_0_
  FROM local_storage localstora0_
  WHERE localstora0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "local_storage", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1707, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1708 (ignored write)  _commit_f(_con, true)
  
end

function API_75_GET_api_roles_1(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1709
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1709, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1710
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1710, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1711 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1712
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1712, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1713
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1713, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1714
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1714, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1715
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1715, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1716
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1716, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1717
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1717, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1718
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1718, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1719
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1719, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1720
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1720, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1721
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1721, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1722
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1722, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1723
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1723, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1724
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1724, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1725
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1725, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1726
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1726, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_2(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1727
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name LIKE %s
  	OR role0_.remark LIKE %s
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "role", "remark", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1727, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1728
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1728, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1729
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1729, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1730
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1730, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1731
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1731, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1732
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1732, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1733
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1733, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1734
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1734, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1735
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1735, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1736
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1736, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1737
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1737, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1738
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1738, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_3(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1739
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1739, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1740
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1740, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1741 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1742
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name LIKE %s
  	OR role0_.remark LIKE %s
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "role", "remark", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1742, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1743
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1743, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1744
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1744, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1745
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1745, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1746
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1746, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1747
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1747, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1748
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1748, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1749
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1749, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1750
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1750, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1751
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1751, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1752
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1752, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1753
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1753, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_4(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1754 (ignored write)  _commit_f(_con, false)
  
  -- line 1755
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1755, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1756
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1756, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1757
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE role0_.name LIKE %s
  	OR role0_.remark LIKE %s
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "role", "name", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "role", "remark", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1757, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1758
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1758, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1759
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1759, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1760
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1760, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1761
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1761, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1762
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1762, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1763
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1763, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1764
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1764, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1765
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1765, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1766
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1766, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1767
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1767, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1768
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1768, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1769
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1769, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_5(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1770
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1770, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1771
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1771, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1772
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1772, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1773
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1773, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1774
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1774, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1775
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1775, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1776
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1776, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1777
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1777, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1778
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1778, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1779
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1779, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1780
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1780, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1781
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1781, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1782
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1782, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1783
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1783, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1784
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1784, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1785
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1785, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1786
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1786, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1787
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1787, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1788
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1788, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_6(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1789 (ignored write)  _commit_f(_con, false)
  
  -- line 1790
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1790, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1791
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1791, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1792
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1792, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1793
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1793, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1794
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1794, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1795
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1795, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1796
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1796, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1797
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1797, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1798
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1798, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1799
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1799, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1800
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1800, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1801
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1801, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1802
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1802, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1803
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1803, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1804
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1804, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1805
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1805, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1806
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1806, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1807
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1807, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1808
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1808, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1809
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1809, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_7(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1810 (ignored write)  _commit_f(_con, false)
  
  -- line 1811
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1811, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1812
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1812, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1813
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1813, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1814
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1814, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1815
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1815, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1816
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1816, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1817
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1817, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1818
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1818, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1819
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1819, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1820
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1820, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1821
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1821, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1822
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1822, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1823
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1823, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1824
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1824, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1825
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1825, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1826
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1826, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1827
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1827, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


end

function API_75_GET_api_roles_8(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1828 (ignored write)  _commit_f(_con, false)
  
end

function API_75_GET_api_roles_9(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1829
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1829, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1830
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1830, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1831
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1831, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1832
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1832, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1833
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1833, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1834
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1834, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1835
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1835, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1836
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1836, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1837
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1837, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1838
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1838, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1839
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1839, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1840
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1840, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1841
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1841, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1842
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1842, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1843
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1843, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1844
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1844, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1845
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1845, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1846 (ignored write)  _commit_f(_con, false)
  
end

function API_75_GET_api_roles_10(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1847
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1847, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1848
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1848, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1849
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1849, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1850
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1850, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1851
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1851, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1852
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1852, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1853
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1853, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1854
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1854, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1855
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1855, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1856
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1856, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1857
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1857, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1858
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1858, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1859
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1859, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1860
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1860, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1861
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1861, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1862
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1862, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1863
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1863, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1864
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1864, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1865
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1865, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1866
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1866, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1867 (ignored write)  _commit_f(_con, false)
  
end

function API_75_GET_api_roles_11(_con)
  local _api = "GET /api/roles"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1868
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  WHERE 1 = 1
  ORDER BY role0_.level ASC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1868, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  -- line 1869
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1869, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1870
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1870, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1871
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1871, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1872
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1872, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1873
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1873, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1874
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1874, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1875
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1875, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1876
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1876, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1877
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1877, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1878
  _sql = [[
  SELECT menus0_.role_id AS role_id1_18_0_, menus0_.menu_id AS menu_id2_18_0_, menu1_.id AS id1_9_1_, menu1_.cache AS cache2_9_1_, menu1_.component AS componen3_9_1_
  	, menu1_.component_name AS componen4_9_1_, menu1_.create_time AS create_t5_9_1_, menu1_.hidden AS hidden6_9_1_, menu1_.i_frame AS i_frame7_9_1_, menu1_.icon AS icon8_9_1_
  	, menu1_.name AS name9_9_1_, menu1_.path AS path10_9_1_, menu1_.pid AS pid11_9_1_, menu1_.sort AS sort12_9_1_
  FROM roles_menus menus0_
  	INNER JOIN menu menu1_ ON menus0_.menu_id = menu1_.id
  WHERE menus0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_menus", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1878, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1879
  _sql = [[
  SELECT depts0_.role_id AS role_id1_17_0_, depts0_.dept_id AS dept_id2_17_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_
  	, dept1_.name AS name4_1_1_, dept1_.pid AS pid5_1_1_
  FROM roles_depts depts0_
  	INNER JOIN dept dept1_ ON depts0_.dept_id = dept1_.id
  WHERE depts0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1879, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1880
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1880, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1881
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1881, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1882
  _sql = [[
  SELECT roles0_.dept_id AS dept_id2_17_0_, roles0_.role_id AS role_id1_17_0_, role1_.id AS id1_16_1_, role1_.create_time AS create_t2_16_1_, role1_.data_scope AS data_sco3_16_1_
  	, role1_.level AS level4_16_1_, role1_.name AS name5_16_1_, role1_.remark AS remark6_16_1_
  FROM roles_depts roles0_
  	INNER JOIN role role1_ ON roles0_.role_id = role1_.id
  WHERE roles0_.dept_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_depts", "dept_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1882, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1883 (ignored write)  _commit_f(_con, false)
  
end

function API_76_PUT_api_job_1(_con)
  local _api = "PUT /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1884 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1885
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1885, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1886 (ignored write)  _commit_f(_con, true)
  
end

function API_76_PUT_api_job_2(_con)
  local _api = "PUT /api/job"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1887
  _sql = [[
  SELECT job0_.id AS id1_6_0_, job0_.create_time AS create_t2_6_0_, job0_.dept_id AS dept_id6_6_0_, job0_.enabled AS enabled3_6_0_, job0_.name AS name4_6_0_
  	, job0_.sort AS sort5_6_0_, dept1_.id AS id1_1_1_, dept1_.create_time AS create_t2_1_1_, dept1_.enabled AS enabled3_1_1_, dept1_.name AS name4_1_1_
  	, dept1_.pid AS pid5_1_1_
  FROM job job0_
  	LEFT JOIN dept dept1_ ON job0_.dept_id = dept1_.id
  WHERE job0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1887, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1888 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1889 (ignored write)  _commit_f(_con, false)
  
end

function API_77_GET_api_jobLogs_1(_con)
  local _api = "GET /api/jobLogs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1890 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

  -- line 1891
  _sql = [[
  SELECT quartzlog0_.id AS id1_15_, quartzlog0_.baen_name AS baen_nam2_15_, quartzlog0_.create_time AS create_t3_15_, quartzlog0_.cron_expression AS cron_exp4_15_, quartzlog0_.exception_detail AS exceptio5_15_
  	, quartzlog0_.is_success AS is_succe6_15_, quartzlog0_.job_name AS job_name7_15_, quartzlog0_.method_name AS method_n8_15_, quartzlog0_.params AS params9_15_, quartzlog0_.time AS time10_15_
  FROM quartz_log quartzlog0_
  WHERE 1 = 1
  ORDER BY quartzlog0_.id DESC
  LIMIT 6
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1891, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1892
  _sql = [[
  SELECT COUNT(quartzlog0_.id) AS col_0_0_
  FROM quartz_log quartzlog0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1892, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_77_GET_api_jobLogs_2(_con)
  local _api = "GET /api/jobLogs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1893
  _sql = [[
  SELECT quartzlog0_.id AS id1_15_, quartzlog0_.baen_name AS baen_nam2_15_, quartzlog0_.create_time AS create_t3_15_, quartzlog0_.cron_expression AS cron_exp4_15_, quartzlog0_.exception_detail AS exceptio5_15_
  	, quartzlog0_.is_success AS is_succe6_15_, quartzlog0_.job_name AS job_name7_15_, quartzlog0_.method_name AS method_n8_15_, quartzlog0_.params AS params9_15_, quartzlog0_.time AS time10_15_
  FROM quartz_log quartzlog0_
  WHERE quartzlog0_.job_name LIKE %s
  ORDER BY quartzlog0_.id DESC
  LIMIT 6
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_log", "job_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1893, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  -- line 1894
  _sql = [[
  SELECT COUNT(quartzlog0_.id) AS col_0_0_
  FROM quartz_log quartzlog0_
  WHERE quartzlog0_.job_name LIKE %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_log", "job_name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1894, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, true)
  
end

function API_77_GET_api_jobLogs_3(_con)
  local _api = "GET /api/jobLogs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1895
  _sql = [[
  SELECT quartzlog0_.id AS id1_15_, quartzlog0_.baen_name AS baen_nam2_15_, quartzlog0_.create_time AS create_t3_15_, quartzlog0_.cron_expression AS cron_exp4_15_, quartzlog0_.exception_detail AS exceptio5_15_
  	, quartzlog0_.is_success AS is_succe6_15_, quartzlog0_.job_name AS job_name7_15_, quartzlog0_.method_name AS method_n8_15_, quartzlog0_.params AS params9_15_, quartzlog0_.time AS time10_15_
  FROM quartz_log quartzlog0_
  WHERE 1 = 1
  ORDER BY quartzlog0_.id DESC
  LIMIT 6
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1895, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_78_DELETE_api_dept_x_1(_con)
  local _api = "DELETE /api/dept/2"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1896
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1896, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1897 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1898 (ignored write)  _commit_f(_con, false)
  
end

function API_79_PUT_api_genConfig_1(_con)
  local _api = "PUT /api/genConfig"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1899
  _sql = [[
  SELECT genconfig0_.id AS id1_5_0_, genconfig0_.api_path AS api_path2_5_0_, genconfig0_.author AS author3_5_0_, genconfig0_.cover AS cover4_5_0_, genconfig0_.module_name AS module_n5_5_0_
  	, genconfig0_.pack AS pack6_5_0_, genconfig0_.path AS path7_5_0_, genconfig0_.prefix AS prefix8_5_0_
  FROM gen_config genconfig0_
  WHERE genconfig0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "gen_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1899, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1900 (ignored write)  _commit_f(_con, true)
  
end

function API_79_PUT_api_genConfig_2(_con)
  local _api = "PUT /api/genConfig"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1901
  _sql = [[
  SELECT genconfig0_.id AS id1_5_0_, genconfig0_.api_path AS api_path2_5_0_, genconfig0_.author AS author3_5_0_, genconfig0_.cover AS cover4_5_0_, genconfig0_.module_name AS module_n5_5_0_
  	, genconfig0_.pack AS pack6_5_0_, genconfig0_.path AS path7_5_0_, genconfig0_.prefix AS prefix8_5_0_
  FROM gen_config genconfig0_
  WHERE genconfig0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "gen_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1901, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_80_GET_api_menus_1(_con)
  local _api = "GET /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1902
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1902, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1903 (ignored write)  _commit_f(_con, false)
  
end

function API_80_GET_api_menus_2(_con)
  local _api = "GET /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1904
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1904, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1905
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1905, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1906 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1907
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1907, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_80_GET_api_menus_3(_con)
  local _api = "GET /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1908 (ignored write)  _commit_f(_con, false)
  
end

function API_80_GET_api_menus_4(_con)
  local _api = "GET /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1909
  _sql = [[
  SELECT role0_.id AS id1_16_, role0_.create_time AS create_t2_16_, role0_.data_scope AS data_sco3_16_, role0_.level AS level4_16_, role0_.name AS name5_16_
  	, role0_.remark AS remark6_16_
  FROM role role0_
  	LEFT JOIN users_roles users1_ ON role0_.id = users1_.role_id
  	LEFT JOIN user user2_ ON users1_.user_id = user2_.id
  WHERE user2_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "user", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1909, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  -- line 1910
  _sql = [[
  SELECT permission0_.role_id AS role_id1_19_0_, permission0_.permission_id AS permissi2_19_0_, permission1_.id AS id1_10_1_, permission1_.alias AS alias2_10_1_, permission1_.create_time AS create_t3_10_1_
  	, permission1_.name AS name4_10_1_, permission1_.pid AS pid5_10_1_
  FROM roles_permissions permission0_
  	INNER JOIN permission permission1_ ON permission0_.permission_id = permission1_.id
  WHERE permission0_.role_id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "roles_permissions", "role_id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1910, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

  -- line 1911
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE 1 = 1
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1911, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1912 (ignored write)  _commit_f(_con, false)
  
end

function API_81_PUT_api_email_1(_con)
  local _api = "PUT /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1913
  _sql = [[
  SELECT emailconfi0_.id AS id1_4_0_, emailconfi0_.from_user AS from_use2_4_0_, emailconfi0_.host AS host3_4_0_, emailconfi0_.pass AS pass4_4_0_, emailconfi0_.port AS port5_4_0_
  	, emailconfi0_.user AS user6_4_0_
  FROM email_config emailconfi0_
  WHERE emailconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "email_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1913, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1914 (ignored write)  _commit_f(_con, true)
  
end

function API_81_PUT_api_email_2(_con)
  local _api = "PUT /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1915
  _sql = [[
  SELECT emailconfi0_.id AS id1_4_0_, emailconfi0_.from_user AS from_use2_4_0_, emailconfi0_.host AS host3_4_0_, emailconfi0_.pass AS pass4_4_0_, emailconfi0_.port AS port5_4_0_
  	, emailconfi0_.user AS user6_4_0_
  FROM email_config emailconfi0_
  WHERE emailconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "email_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1915, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1916 (ignored write)  _commit_f(_con, true)
  
end

function API_81_PUT_api_email_3(_con)
  local _api = "PUT /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1917
  _sql = [[
  SELECT emailconfi0_.id AS id1_4_0_, emailconfi0_.from_user AS from_use2_4_0_, emailconfi0_.host AS host3_4_0_, emailconfi0_.pass AS pass4_4_0_, emailconfi0_.port AS port5_4_0_
  	, emailconfi0_.user AS user6_4_0_
  FROM email_config emailconfi0_
  WHERE emailconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "email_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1917, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_81_PUT_api_email_4(_con)
  local _api = "PUT /api/email"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1918
  _sql = [[
  SELECT emailconfi0_.id AS id1_4_0_, emailconfi0_.from_user AS from_use2_4_0_, emailconfi0_.host AS host3_4_0_, emailconfi0_.pass AS pass4_4_0_, emailconfi0_.port AS port5_4_0_
  	, emailconfi0_.user AS user6_4_0_
  FROM email_config emailconfi0_
  WHERE emailconfi0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "email_config", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1918, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
-- line 1919 (ignored write)
  _begin_f(_con, false)

-- line 1920 (ignored write)  _commit_f(_con, false)
  
end

function API_82_PUT_api_dept_1(_con)
  local _api = "PUT /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1921
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1921, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1922 (ignored write)  _commit_f(_con, true)
  
end

function API_82_PUT_api_dept_2(_con)
  local _api = "PUT /api/dept"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1923
  _sql = [[
  SELECT dept0_.id AS id1_1_0_, dept0_.create_time AS create_t2_1_0_, dept0_.enabled AS enabled3_1_0_, dept0_.name AS name4_1_0_, dept0_.pid AS pid5_1_0_
  FROM dept dept0_
  WHERE dept0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dept", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1923, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1924 (ignored write)  _commit_f(_con, false)
  
end

function API_83_POST_api_menus_1(_con)
  local _api = "POST /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1925
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1925, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1926 (ignored write)  _commit_f(_con, false)
  
end

function API_83_POST_api_menus_2(_con)
  local _api = "POST /api/menus"
  local _sql
  local _formatted_sql
  local _params
  local _res

  -- line 1927
  _sql = [[
  SELECT menu0_.id AS id1_9_, menu0_.cache AS cache2_9_, menu0_.component AS componen3_9_, menu0_.component_name AS componen4_9_, menu0_.create_time AS create_t5_9_
  	, menu0_.hidden AS hidden6_9_, menu0_.i_frame AS i_frame7_9_, menu0_.icon AS icon8_9_, menu0_.name AS name9_9_, menu0_.path AS path10_9_
  	, menu0_.pid AS pid11_9_, menu0_.sort AS sort12_9_
  FROM menu menu0_
  WHERE menu0_.name = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "menu", "name", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1927, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()


  _begin_f(_con, false)

-- line 1928 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1929 (ignored write)  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_1(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1930
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE 1 = 1
  ORDER BY quartzjob0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1930, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1931 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1932 (ignored write)  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_2(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1933
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE 1 = 1
  ORDER BY quartzjob0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1933, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1934 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1935 (ignored write)  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_3(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1936 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1937 (ignored write)  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_4(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1938 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1939
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE 1 = 1
  ORDER BY quartzjob0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1939, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_5(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1940
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_, quartzjob0_.bean_name AS bean_nam2_14_, quartzjob0_.cron_expression AS cron_exp3_14_, quartzjob0_.is_pause AS is_pause4_14_, quartzjob0_.job_name AS job_name5_14_
  	, quartzjob0_.method_name AS method_n6_14_, quartzjob0_.params AS params7_14_, quartzjob0_.remark AS remark8_14_, quartzjob0_.update_time AS update_t9_14_
  FROM quartz_job quartzjob0_
  WHERE 1 = 1
  ORDER BY quartzjob0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1940, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1941 (ignored write)  _commit_f(_con, false)
  
end

function API_84_GET_api_jobs_6(_con)
  local _api = "GET /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1942 (ignored write)  _commit_f(_con, false)
  
end

function API_85_POST_api_code_resetEmail_1(_con)
  local _api = "POST /api/code/resetEmail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1943
  _sql = [[
  SELECT verificati0_.id AS id1_23_, verificati0_.code AS code2_23_, verificati0_.create_time AS create_t3_23_, verificati0_.scenes AS scenes4_23_, verificati0_.status AS status5_23_
  	, verificati0_.type AS type6_23_, verificati0_.value AS value7_23_
  FROM verification_code verificati0_
  WHERE verificati0_.scenes = %s
  	AND verificati0_.type = %s
  	AND verificati0_.value = %s
  	AND verificati0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "verification_code", "scenes", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "value", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1943, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1944 (ignored write)  _commit_f(_con, true)
  
end

function API_85_POST_api_code_resetEmail_2(_con)
  local _api = "POST /api/code/resetEmail"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1945
  _sql = [[
  SELECT verificati0_.id AS id1_23_, verificati0_.code AS code2_23_, verificati0_.create_time AS create_t3_23_, verificati0_.scenes AS scenes4_23_, verificati0_.status AS status5_23_
  	, verificati0_.type AS type6_23_, verificati0_.value AS value7_23_
  FROM verification_code verificati0_
  WHERE verificati0_.scenes = %s
  	AND verificati0_.type = %s
  	AND verificati0_.value = %s
  	AND verificati0_.status = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "verification_code", "scenes", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "type", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "value", {"select", "where", "relation"}, nil}),
    _gen_parameter_f({_api, _sql, "verification_code", "status", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1945, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_86_PUT_api_jobs_x_1(_con)
  local _api = "PUT /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1946
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1946, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1947 (ignored write)  _commit_f(_con, false)
  
end

function API_86_PUT_api_jobs_x_2(_con)
  local _api = "PUT /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1948 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

  -- line 1949
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1949, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1950 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1951 (ignored write)  _commit_f(_con, false)
  
end

function API_86_PUT_api_jobs_x_3(_con)
  local _api = "PUT /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1952
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1952, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1953 (ignored write)  _commit_f(_con, false)
  
-- line 1954 (ignored write)
  _begin_f(_con, false)

-- line 1955 (ignored write)  _commit_f(_con, false)
  
end

function API_86_PUT_api_jobs_x_4(_con)
  local _api = "PUT /api/jobs/3"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1956
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1956, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1957 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, false)

-- line 1958 (ignored write)  _commit_f(_con, false)
  
end

function API_87_DELETE_api_dictDetail_x_1(_con)
  local _api = "DELETE /api/dictDetail/16"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1959
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_0_, dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.label AS label2_3_0_, dictdetail0_.sort AS sort3_3_0_, dictdetail0_.value AS value4_3_0_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1959, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1960 (ignored write)  _commit_f(_con, true)
  
end

function API_87_DELETE_api_dictDetail_x_2(_con)
  local _api = "DELETE /api/dictDetail/16"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1961
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_0_, dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.label AS label2_3_0_, dictdetail0_.sort AS sort3_3_0_, dictdetail0_.value AS value4_3_0_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1961, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1962 (ignored write)  _commit_f(_con, true)
  
  _begin_f(_con, false)

-- line 1963 (ignored write)  _commit_f(_con, false)
  
end

function API_88_GET_api_qiNiuContent_1(_con)
  local _api = "GET /api/qiNiuContent"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

  -- line 1964
  _sql = [[
  SELECT qiniuconte0_.id AS id1_13_, qiniuconte0_.bucket AS bucket2_13_, qiniuconte0_.name AS name3_13_, qiniuconte0_.size AS size4_13_, qiniuconte0_.suffix AS suffix5_13_
  	, qiniuconte0_.type AS type6_13_, qiniuconte0_.update_time AS update_t7_13_, qiniuconte0_.url AS url8_13_
  FROM qiniu_content qiniuconte0_
  WHERE 1 = 1
  ORDER BY qiniuconte0_.id DESC
  LIMIT 10
  ]]
  _params = {
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1964, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

  _commit_f(_con, false)
  
end

function API_89_POST_api_jobs_1(_con)
  local _api = "POST /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1965 (ignored write)  _commit_f(_con, false)
  
end

function API_89_POST_api_jobs_2(_con)
  local _api = "POST /api/jobs"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, false)

-- line 1966 (ignored write)  _commit_f(_con, false)
  
  _begin_f(_con, true)

-- line 1967 (ignored write)  -- line 1968
  _sql = [[
  SELECT quartzjob0_.id AS id1_14_0_, quartzjob0_.bean_name AS bean_nam2_14_0_, quartzjob0_.cron_expression AS cron_exp3_14_0_, quartzjob0_.is_pause AS is_pause4_14_0_, quartzjob0_.job_name AS job_name5_14_0_
  	, quartzjob0_.method_name AS method_n6_14_0_, quartzjob0_.params AS params7_14_0_, quartzjob0_.remark AS remark8_14_0_, quartzjob0_.update_time AS update_t9_14_0_
  FROM quartz_job quartzjob0_
  WHERE quartzjob0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "quartz_job", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1968, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1969 (ignored write)  _commit_f(_con, true)
  
-- line 1970 (ignored write)
  _begin_f(_con, false)

-- line 1971 (ignored write)  _commit_f(_con, false)
  
end

function API_90_DELETE_api_dictDetail_x_1(_con)
  local _api = "DELETE /api/dictDetail/11"
  local _sql
  local _formatted_sql
  local _params
  local _res

  _begin_f(_con, true)

  -- line 1972
  _sql = [[
  SELECT dictdetail0_.id AS id1_3_0_, dictdetail0_.dict_id AS dict_id5_3_0_, dictdetail0_.label AS label2_3_0_, dictdetail0_.sort AS sort3_3_0_, dictdetail0_.value AS value4_3_0_
  FROM dict_detail dictdetail0_
  WHERE dictdetail0_.id = %s
  ]]
  _params = {
    _gen_parameter_f({_api, _sql, "dict_detail", "id", {"select", "where", "relation"}, nil}),
  }
  _formatted_sql = string.format(_sql, unpack(_params))

  _timing_start_f(_stmt_timer)
    _res = _con:query(_formatted_sql)
  _record_timing_f(0, 1972, _timing_end_f(_stmt_timer))
  _record_params_and_result_f(_params, _res)
collectgarbage()

-- line 1973 (ignored write)  _commit_f(_con, true)
  
end

